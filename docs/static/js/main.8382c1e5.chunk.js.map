{"version":3,"sources":["libs/utils.js","components/Sudoku/Board/Block/Cell/Cell.module.scss","components/UI/Digits/Digits.module.scss","components/Sudoku/Controls/Controls.module.scss","components/Sudoku/Controls/Digits/Digits.module.scss","containers/Sudodu/Main.module.scss","components/Sudoku/Board/Block/Block.module.scss","components/Sudoku/Board/Board.module.scss","components/UI/Modal/Modal.module.scss","components/UI/Button/Button.module.scss","components/UI/Backdrop/Backdrop.module.scss","containers/Sudodu/NewGame.module.scss","components/Sudoku/Board/Arrow.module.scss","components/UI/Loading/Loading.module.scss","components/UI/Spinner/Spinner.module.css","containers/Sudodu/Sudoku.module.scss","components/UI/Button/Button.js","components/UI/Digits/Digits.js","libs/position.js","libs/notes.js","libs/logic.js","libs/solver.js","libs/sudoku.js","components/Sudoku/Board/Block/Cell/Cell.js","components/Sudoku/Board/Block/Block.js","components/UI/AspectRatio/AspectRatioBox.js","components/Sudoku/Board/calc.js","components/Sudoku/Board/Arrow.js","components/Sudoku/Board/Frame.js","components/Sudoku/Board/Board.js","components/UI/AspectRatio/AspectRatioWrapper.js","components/Sudoku/Controls/Digits/Digits.js","components/Sudoku/Controls/Controls.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","components/UI/Spinner/Spinner.js","components/UI/Loading/Loading.js","containers/Sudodu/Main.js","containers/Sudodu/NewGame.js","containers/Sudodu/Sudoku.js","App.js","serviceWorker.js","index.js"],"names":["combx","comb","findNGroupFromLinks","findALSFromPoints","debug","process","nilFunc","setDebug","d","n","k","i","res","push","f","aggregateLinks","links","order","startName","endsName","s","link","start","end","v","getAttrDefault","Set","add","cls","options","checkClear","points","Object","values","xpoints","filter","p","ends","size","length","idxes","starts","idx","point","forEach","cleared","has","e","m","_console","window","global","console","enabled","ifEnabled","val","def","this","group","groupEnd","log","error","obj","name","defVal","hasOwnProperty","shuffleArray","array","j","Math","floor","random","intersection","setA","setB","_intersection","elem","module","exports","Button","type","onClick","disabled","children","classes","styles","className","join","generateDigit","digitClass","c","color","digitClassName","style","backgroundColor","Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","getDigitLocalPos","_baseArray","blockShape","indices","blocks","rows","cols","rowColToBlock","row","col","blockRowColIndex","blockRows","block","blockCols","newCells","valueFunc","map","copyCells","cells","copied","_rowPositions","key","toString","rowPositions","_rowRelatedPositions","r","pos","_colPositions","colPositions","_colRelatedPositions","_blockPositions","b","_blocFlattenkPositions","blockPoses","_blockRelatedPositions","_","_relatedPositions","getPosition","getPosBlock","getBlockPositions","getBlockFlattenPositions","getRowPositions","getColPositions","getRelatedBlockPositions","undefined","getRelatedRowPositions","getRelatedColPositions","getRelatedPositions","flattenPositions","flat","_keyPositionMapping","getPositionByKey","mapPositionsTo","getCell","a","sb","getCommonRelatedPositions","poses","rposes","calcPosDistance","aPos","bPos","dRow","dCol","findClosedPosPair","aPoses","bPoses","minDistance","Number","MAX_VALUE","digits","Notes","value","_base","notes","is","ns","findNGroup","findNXGroup","getPosDomains","domain","ds","getPosDigitLinks","positions","entries","note","getPositions","domains","getAToBLinks","getEnd","getRowToColLinks","getRowToBlockLinks","getColToBlockLinks","getPositionsForDigit","types","rc","cr","rb","br","cb","bc","rcLinks","isXWing","effect","rbLinks","cbLinks","search","initValue","new","stat","isSolved","chooseNextCell","candidates","nextCells","setCellValue","eliminate","xpos","xvals","minLen","vals","basicEliminate","rpos","newValue","delete","isEmpty","changed","dfsSearchChain","checkChain","genNextChainAndNode","searchChainDFS","Sudoku","puzzle","jumpTo","revert","_historyLowerBound","_curCellsIdx","_cellsHistory","_cut","_rollback","_notify","revertTo","jump","steps","curIdx","jumpToFirst","jumpToLast","lastIdx","getCurCells","_txCells","_setCellValue","_txSetCellValue","_shouldNotify","subscribers","_setPuzzle","defaultPuzzle","_chainCheckMemo","x","xy","parsedCells","parse","_results","xCells","cell","origin","st","Date","results","et","JSON","stringify","solve","_setCells","slice","action","payload","_checkComplete","placedAsOrigin","withNotes","originAsPlaced","1","2","3","4","5","6","7","8","9","_startTx","curCells","_eliminate","actions","RESET","NOTE","_note","AUTO_NOTE","_autoNote","AUTO_PLACE","_autoPlace","AUTO_POINTING","_autoPointing","AUTO_CLAIMING","_autoClaiming","AUTO_PLACE_POINTING_CLAIMING","_autoPlacePointingClaiming","UPDATE_CELL_VALUE","_updateCellValue","ELIMINATE_GROUP","otherPoses","eliminateGroup","ELIMINATE_XGROUP","otherPositions","eliminateXGroup","ELIMINATE_CHAIN","_eliminateChain","ELIMINATE_TRIAL_ERROR","_eliminateTrialError","HANDLE_TIP","_handleTip","commit","_handlActions","_commit","dispatch","isNoting","chain","tip","errDigits","_isComplete","calcAvailableDigits","count","placed","_noteCellValue","_placeCellValue","oldCell","trial","withoutALS","findGroup","findXGroup","findChain","findTrialError","eliminateChain","eliminateTrialError","_disableNotify","startIdx","maxDepth","tryTip","deepTried","updateCellValue","autoPlacePointingClaiming","err","_checkValidity","findTip","handleTip","_enableNotify","endIdx","includedCells","h","getDigitPosesAndLinks","alsSizes","dPoses","dGroupPoses","dAlsces","dLinks","baseData","singlePosSrcs","basicPosSrcs","isGroup","defaultConfig","tryDigitLinks","tryCellLinks","tryGroupLinks","tryAlscLinks","posSrcs","searchChain","earlyExitLen","checkMemo","checkChainX","checkChainXY","maxLength","config","getPoses","extraData","td","prepareChainResult","alscSrcs","allClosedConfig","effectedPoses","keep","yd","Error","flattenCells","match","cellPattern","flattenCellValues","startsWith","endsWith","split","parseInt","valuePattern","test","getPosTypeSign","isAlsc","startPos","endNode","endPos","hasMulti","hasGroup","hasALS","node","parts","checkExistAndEqual","startMemoKey","memo","getRealPoses","cpos","endMemoKey","checkOk","effectedDs","keepDs","startPoses","targets","tpos","chainHasNode","nextNode","cd","alsc","curNode","rcc","als","nextChainAndNode","hasCommon","newGroupPos","getOtherRowGroupPositions","groupPoses","getOtherColGroupPositions","getOtherBlockGroupPositions","filteredGroupPoses","ok","getGroupPosLink","strongTargets","weakTargets","getOtherGroupPositions","strongPos","opos","false","true","getPosLink","spos","filterPoses","getAlscLink","alscLinks","xPositions","xPoses","blockDigitPoses","digitPoses","sblock","digitGroups","sd","groupPos","gp","getDigitGroupPoses","alses","xlinks","digitInfos","sort","digitInfo","alsces","findGroupForALSC","getDigitALSCes","dAlscLinks","getRCCs","t","getDigitAlscAndLinks","otherDs","g","rccs","noteClassName","activeVal","highlighted","effectMarked","marks","Note","ActiveValue","src","highlights","posNotes","posSubNotes","subNotes","MarkedNoteValue","MarkedValue","Effected","Cell","React","activePos","available","showAvail","content","isSelected","activeRow","activeCol","activeBlock","Selected","Related","clickable","Available","Place","domainMarked","MarkedHighlight","withoutOutlinePoses","WithoutOutline","MarkedDomain","MarkedEffect","RowNotes","Value","Placed","Block","availableCells","cellClickedHandler","isOdd","Odd","Row","Box","styled","div","width","ratio","Content","fixed","scroll","getCoord","localRow","Arrow","attrs","y","distance","deg","borderTop","height","transform","dd","startDigit","endDigit","sc","calc","ec","sx","sy","dx","dy","sqrt","acos","PI","Pointer","Frame","ex","ey","top","left","right","bottom","startRow","startCol","endRow","endCol","Board","isComplete","availablePositions","SudokuBoard","Complete","AspectRatioBox","frames","frame","arrows","arrow","Wrapper","props","Digits","availableDigits","remainingDigits","digitClickedHandler","genClassName","useCallback","Digit","active","Disabled","AspectRatioWrapper","Count","Controls","cellsRecord","hasPrev","hasNext","withALS","deselectHandler","toggleShowAvailHandler","toggleIsNotingHandler","toggleWithALSHandler","solveHandler","resetHandler","eraseValueHandler","autoNoteHandler","autoPlacePointingClaimingHandler","tipHandler","cancelTipHandler","changeChainStepHandler","jumpToTrailStartHandler","History","desc","Panel","Tools","Tip","ChainSteper","Backdrop","show","absolute","Absolute","close","Modal","Show","Close","prevProps","nextProps","Spinner","Loader","sudoku","sudokus","startNewGameHandler","newGameHandler","emptyHandler","useState","isLoading","setIsLoading","showShare","setShowShare","setChanged","useEffect","subscribe","unsubscribe","activeState","setActiveState","setShowAvail","setIsNoting","setWithALS","setTip","chainStep","setChainStep","boardCells","useMemo","calcAvailablePositions","calcRemainingDigits","startGameHandler","editGameHandler","curActivePos","force","curActiveVal","confirm","reset","autoNote","clearHistoryLowerBound","setTimeout","setHistoryLowerBound","moveActivePos","curRow","curCol","moveActiveVal","domainInfo","curChain","allPoses","effectedNotes","_posNotes","lastAls","lastPos","startNode","len","jumpToTrialStartHandler","keydownHandler","code","ctrlKey","isComposing","metaKey","document","addEventListener","removeEventListener","shareContent","url","URL","location","initialPuzzle","curPuzzle","QRCode","Loading","Menu","Info","NewGame","cancelNewGameHandler","setPuzzle","puzzleChangedHandler","event","target","textareaRef","useRef","current","focus","shiftKey","preventDefault","message","ref","id","inputMode","onChange","placeholder","alertInfo","setAlertInfo","checkSudokuResults","URLSearchParams","get","instance","setSudoku","isNewGame","setIsNewGame","puzzleError","setPuzzleError","alert","isDebug","utils","Main","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","getElementById","href","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8382c1e5.chunk.js","sourcesContent":["let debug = process.env.NODE_ENV !== 'production';\nconst nilFunc = () => {};\nexport const setDebug = () => {\n  debug = true;\n};\n\nfunction* combx(d, n, k) {\n  if (n < k) {\n  } else if (k === 1) {\n    for (let i = d; i < n + d; i++) {\n      yield [i];\n    }\n  } else if (n === k) {\n    const res = [];\n    for (let i = d; i < n + d; i++) {\n      res.push(i);\n    }\n    yield res;\n  } else {\n    // with 0\n    for (const res of combx(d + 1, n - 1, k - 1)) {\n      yield [d, ...res];\n    }\n    // without 0\n    yield* combx(d + 1, n - 1, k);\n  }\n}\n\nexport function* comb(n, k) {\n  yield* combx(0, n, k);\n}\n\nexport const aggregateLinks = (links, order = 0, startName = 'start', endsName = 'ends') => {\n  const s = {};\n  for (const link of links) {\n    const start = link[order];\n    const end = link[(order + 1) % 2];\n    const v = getAttrDefault(s, start, { [startName]: start, [endsName]: new Set() });\n    v[endsName].add(end);\n  }\n  return s;\n};\n\nexport function* findNGroupFromLinks(links, n, cls, options = { checkClear: true }) {\n  const points = Object.values(aggregateLinks(links, cls));\n  const xpoints = points.filter(p => p.ends.size <= n);\n  if (options.checkClear && points.length <= n) {\n    // only return group if count(starts) > n\n    return;\n  }\n\n  for (const idxes of comb(xpoints.length, n)) {\n    // check\n    const starts = new Set();\n    const ends = new Set();\n    for (const idx of idxes) {\n      const point = xpoints[idx];\n      starts.add(point.start);\n      point.ends.forEach(ends.add, ends);\n      if (ends.size > n) {\n        break;\n      }\n    }\n    if (ends.size === n) {\n      let cleared = options.checkClear;\n      if (cleared) {\n        // n is 1, no need to check.\n        // check if group is cleared\n        for (const p of points.filter(p => !starts.has(p.start))) {\n          if ([...p.ends].filter(e => !ends.has(e)).length < p.ends.size) {\n            // other starts has end in ends\n            // need clear\n            cleared = false;\n            break;\n          }\n        }\n      }\n\n      if (!cleared) {\n        yield [starts, ends];\n      }\n    }\n  }\n}\n\nexport function* findALSFromPoints(points, n) {\n  const m = n + 1;\n  const xpoints = points.filter(p => p.ends.size <= m);\n\n  for (const idxes of comb(xpoints.length, n)) {\n    // check\n    const starts = new Set();\n    const ends = new Set();\n    for (const idx of idxes) {\n      const point = xpoints[idx];\n      starts.add(point.start);\n      point.ends.forEach(ends.add, ends);\n      if (ends.size > m) {\n        break;\n      }\n    }\n    if (ends.size === m) {\n      yield [starts, ends];\n    }\n  }\n}\n\nconst _store = {};\nexport const memorize = f => (...args) => {\n  if (_store[f]) {\n    _store[f] = { args: [], res: undefined };\n  }\n  const data = _store[f];\n  if (!(data.args.length === args.length && data.args.reduce((r, arg, idx) => r && Object.is(arg, args[idx]), true))) {\n    data.args = args;\n    data.res = f(...args);\n  }\n  return data.res;\n};\n\nconst _console = (window || global || {}).console || {};\n\nexport const console = {\n  enabled: true,\n  ifEnabled(val, def) {\n    return (this.enabled && val) || def;\n  },\n  get group() {\n    return this.ifEnabled(debug && _console.group, nilFunc);\n  },\n  get groupEnd() {\n    return this.ifEnabled(debug && _console.groupEnd, nilFunc);\n  },\n  get log() {\n    return this.ifEnabled(debug && _console.log, nilFunc);\n  },\n  get error() {\n    return this.ifEnabled(debug && _console.error, nilFunc);\n  },\n};\n\nexport const getAttrDefault = (obj, name, defVal) => {\n  if (!obj.hasOwnProperty(name)) {\n    obj[name] = defVal;\n  }\n  return obj[name];\n};\nexport function shuffleArray(array) {\n  const res = [...array];\n  for (let i = res.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [res[i], res[j]] = [res[j], res[i]];\n  }\n  return res;\n}\n\nexport function intersection(setA, setB) {\n  let _intersection = new Set();\n  for (let elem of setB) {\n    if (setA.has(elem)) {\n      _intersection.add(elem);\n    }\n  }\n  return _intersection;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Value\":\"Cell_Value__1lDbW\",\"Notes\":\"Cell_Notes__10ap7\",\"Related\":\"Cell_Related__ET6Lg\",\"Available\":\"Cell_Available__3vvqK\",\"Place\":\"Cell_Place__3TPHN\",\"Note\":\"Cell_Note__2U2fC\",\"MarkedDomain\":\"Cell_MarkedDomain__31hFJ\",\"MarkedEffect\":\"Cell_MarkedEffect___usON\",\"MarkedHighlight\":\"Cell_MarkedHighlight__2O1xC\",\"WithoutOutline\":\"Cell_WithoutOutline__35g8t\",\"ActiveValue\":\"Cell_ActiveValue__3McOV\",\"Placed\":\"Cell_Placed__3HOvj\",\"Selected\":\"Cell_Selected__2LsAU\",\"MarkedValue\":\"Cell_MarkedValue__dMEee\",\"MarkedNoteValue\":\"Cell_MarkedNoteValue__24o3W\",\"Effected\":\"Cell_Effected__HnLYk\",\"RowNotes\":\"Cell_RowNotes__1QNhn\",\"PlacedValue\":\"Cell_PlacedValue__2vP-2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Zero\":\"Digits_Zero__2W6xd\",\"One\":\"Digits_One__-wXsd\",\"Two\":\"Digits_Two__5WRCG\",\"Three\":\"Digits_Three__1GKk-\",\"Four\":\"Digits_Four__1ahFU\",\"Five\":\"Digits_Five__3m1dx\",\"Six\":\"Digits_Six__kvriF\",\"Seven\":\"Digits_Seven__2_nmU\",\"Eight\":\"Digits_Eight__GNMw3\",\"Nine\":\"Digits_Nine__3u9wd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__1Accx\",\"History\":\"Controls_History__2GRXF\",\"Panel\":\"Controls_Panel__1AK4m\",\"Tools\":\"Controls_Tools__1-fbY\",\"Tip\":\"Controls_Tip__2IHiE\",\"ChainSteper\":\"Controls_ChainSteper__RRrIh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Digits\":\"Digits_Digits__3-KZF\",\"Digit\":\"Digits_Digit__1MXW9\",\"digit\":\"Digits_digit__3Mpxe\",\"Disabled\":\"Digits_Disabled__1N4Jw\",\"active\":\"Digits_active__2AexO\",\"Count\":\"Digits_Count__Eq4Q5\",\"isNoting\":\"Digits_isNoting__-OBTK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Main_Menu__3YGZL\",\"Board\":\"Main_Board__3XJet\",\"Controls\":\"Main_Controls__1MSdo\",\"Info\":\"Main_Info__2888w\",\"QRCode\":\"Main_QRCode__1jj5B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Block\":\"Block_Block__1kJyh\",\"Odd\":\"Block_Odd__2xFZf\",\"Row\":\"Block_Row__11Olq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SudokuBoard\":\"Board_SudokuBoard__3cPYp\",\"Row\":\"Board_Row__2r5V5\",\"Complete\":\"Board_Complete__UekFD\",\"SudokuComplete\":\"Board_SudokuComplete__13blN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__31OI7\",\"Show\":\"Modal_Show__d05bc\",\"Close\":\"Modal_Close__IQjCe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2Ajf-\",\"Warn\":\"Button_Warn__1cddQ\",\"On\":\"Button_On__3d77T\",\"Off\":\"Button_Off__R9f9J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__Vem4f\",\"Absolute\":\"Backdrop_Absolute__Z8lxG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewGame\":\"NewGame_NewGame__2hKIv\",\"Error\":\"NewGame_Error__mao55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pointer\":\"Arrow_Pointer__1rYd7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Loading_Spinner__1CFco\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load2\":\"Spinner_load2__2gkgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sudoku\":\"Sudoku_Sudoku__3acWS\"};","import React from 'react';\nimport styles from './Button.module.scss';\n\nconst Button = ({ type, onClick, disabled = false, children }) => {\n  const classes = [styles.Button];\n  if (type) {\n    classes.push(styles[type]);\n  }\n  return (\n    <button className={classes.join(' ')} disabled={disabled} onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styles from './Digits.module.scss';\n\nconst styleColor = c => (c ? { backgroundColor: c } : {});\n\nconst generateDigit = digitClass => ({\n  color,\n  digitClassName = 'digit',\n  className = '',\n  children,\n}) => (\n  <div\n    className={`${digitClass} ${digitClassName} ${className}`}\n    style={styleColor(color)}\n  >\n    {children}\n  </div>\n);\n\nexport const Zero = generateDigit(styles.Zero);\nexport const One = generateDigit(styles.One);\nexport const Two = generateDigit(styles.Two);\nexport const Three = generateDigit(styles.Three);\nexport const Four = generateDigit(styles.Four);\nexport const Five = generateDigit(styles.Five);\nexport const Six = generateDigit(styles.Six);\nexport const Seven = generateDigit(styles.Seven);\nexport const Eight = generateDigit(styles.Eight);\nexport const Nine = generateDigit(styles.Nine);\n\nexport default [\n  <Zero />,\n  <One />,\n  <Two />,\n  <Three />,\n  <Four />,\n  <Five />,\n  <Six />,\n  <Seven />,\n  <Eight />,\n  <Nine />,\n];\n","// local position is position in block.\nexport const getDigitLocalPos = d => [Math.floor((d - 1) / 3), (d - 1) % 3];\nconst _baseArray = [0, 1, 2, 3, 4, 5, 6, 7, 8];\nexport const blockShape = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n];\n\nexport const indices = _baseArray;\nexport const blocks = _baseArray;\nexport const rows = _baseArray;\nexport const cols = _baseArray;\n\n// (row, col)->block\nexport const rowColToBlock = (row, col) => Math.floor(row / 3) * 3 + Math.floor(col / 3);\n// (row, col)-> index in block\nexport const blockRowColIndex = (row, col) => (row % 3) * 3 + (col % 3);\n// rows of block\nexport const blockRows = block => {\n  const start = Math.floor(block / 3) * 3;\n  return [start, start + 1, start + 2];\n};\n// cols of block\nexport const blockCols = block => {\n  const start = (block % 3) * 3;\n  return [start, start + 1, start + 2];\n};\n\nexport const newCells = valueFunc => {\n  return rows.map(row => cols.map(col => valueFunc && valueFunc(row, col)));\n};\nexport const copyCells = cells => {\n  const copied = [...cells];\n  for (const row of rows) {\n    copied[row] = [...copied[row].map(v => ({ ...v }))];\n  }\n  return copied;\n};\n\nconst _rowPositions = _baseArray.map(row =>\n  _baseArray.map(col => ({\n    key: `r${row}c${col}`,\n    toString() {\n      return this.key;\n    },\n    // left->right, top->bottom\n    idx: row * 9 + col,\n    // domains: row, col, block\n    row,\n    col,\n    block: rowColToBlock(row, col),\n  }))\n);\nexport const rowPositions = _rowPositions;\n\n// row positions without col\nconst _rowRelatedPositions = _baseArray.map(r => _baseArray.map(c => _rowPositions[r].filter(pos => pos.col !== c)));\nconst _colPositions = _baseArray.map(c => _baseArray.map(r => _rowPositions[r][c]));\nexport const colPositions = _colPositions;\n// col positions without row\nconst _colRelatedPositions = _baseArray.map(c => _baseArray.map(r => _colPositions[c].filter(pos => pos.row !== r)));\n\n// block positions 3x3\nconst _blockPositions = _baseArray.map(b => blockRows(b).map(row => _rowPositions[row].filter(pos => pos.block === b)));\n\nconst _blocFlattenkPositions = _baseArray.map(b => {\n  const blockPoses = _blockPositions[b];\n  return [...blockPoses[0], ...blockPoses[1], ...blockPoses[2]];\n});\n// block positions without it's row/col index\nconst _blockRelatedPositions = _baseArray.map(b =>\n  _baseArray.map(i => _blocFlattenkPositions[b].filter((_, idx) => idx !== i))\n);\n\n// positions without row/col\nconst _relatedPositions = _baseArray.map(r =>\n  _baseArray.map(c => {\n    const b = rowColToBlock(r, c);\n    const res = [];\n    _rowPositions.forEach(rows =>\n      rows.forEach(pos => {\n        const { row, col, block } = pos;\n        if (r === row && c === col && b === block) {\n          return;\n        }\n        if (r === row || c === col || b === block) {\n          res.push(pos);\n        }\n      })\n    );\n    return res;\n  })\n);\n\nexport const getPosition = (row, col) => _rowPositions[row][col];\n\nexport const getPosBlock = (row, col) => _rowPositions[row][col].block;\n\nexport const getBlockPositions = block => _blockPositions[block];\nexport const getBlockFlattenPositions = block => _blocFlattenkPositions[block];\nexport const getRowPositions = row => _rowPositions[row];\nexport const getColPositions = col => _colPositions[col];\n\nexport const getRelatedBlockPositions = ({ row, col, block }) =>\n  _blockRelatedPositions[block === undefined ? rowColToBlock(row, col) : block][blockRowColIndex(row, col)];\nexport const getRelatedRowPositions = ({ row, col }) => _rowRelatedPositions[row][col];\nexport const getRelatedColPositions = ({ row, col }) => _colRelatedPositions[col][row];\nexport const getRelatedPositions = ({ row, col }) => _relatedPositions[row][col];\n\n// all positions from left to right, top to bottom.\n// used to iterate all positions\nexport const flattenPositions = _rowPositions.flat();\n\nconst _keyPositionMapping = {};\nflattenPositions.forEach(pos => {\n  _keyPositionMapping[pos.key] = pos;\n});\n\nexport const getPositionByKey = key => _keyPositionMapping[key];\n\nexport const mapPositionsTo = f => _baseArray.map(row => _baseArray.map(col => f(row, col)));\n\nexport const getCell = (cells, pos) => cells[pos.row][pos.col];\n\nconst _intersection = (a, b) => {\n  const sb = new Set(b);\n  return a.filter(v => sb.has(v));\n};\n\nexport const getCommonRelatedPositions = (...poses) => {\n  switch (poses.length) {\n    case 0:\n      return [];\n    case 1:\n      return getRelatedPositions(poses[0]);\n    default:\n      const [pos, ...rposes] = poses;\n      return _intersection(getRelatedPositions(pos), getCommonRelatedPositions(...rposes));\n  }\n};\n\nconst calcPosDistance = (aPos, bPos) => {\n  const dRow = aPos.row - bPos.row;\n  const dCol = aPos.col - bPos.col;\n  return dRow * dRow + dCol * dCol;\n};\n\nexport const findClosedPosPair = (aPoses, bPoses) => {\n  if (aPoses.length === 1 && bPoses === 1) {\n    return [aPoses[0], bPoses[0]];\n  }\n\n  let minDistance = Number.MAX_VALUE;\n  let a = null;\n  let b = null;\n  for (const aPos of aPoses) {\n    for (const bPos of bPoses) {\n      const d = calcPosDistance(aPos, bPos);\n      if (d < minDistance) {\n        minDistance = d;\n        a = aPos;\n        b = bPos;\n      }\n    }\n  }\n\n  return [a, b];\n};\n","export const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nexport class Notes {\n  static _base = 1 << 16;\n  static new(...notes) {\n    let value = Notes._base;\n    for (const n of notes) {\n      value |= 1 << n;\n    }\n    return value;\n  }\n\n  static isEmpty(value) {\n    return value === this._base;\n  }\n\n  static size(value) {\n    let s = 0;\n    for (let n = 1; n <= 9; n++) {\n      value = value >> 1;\n      if ((value & 1) === 1) {\n        s++;\n      }\n    }\n    return s;\n  }\n\n  static first(value) {\n    for (let n = 1; n <= 9; n++) {\n      if (Notes.has(value, n)) {\n        return n;\n      }\n    }\n  }\n\n  static entries(value) {\n    const res = [];\n    for (let n = 1; n <= 9; n++) {\n      if (Notes.has(value, n)) {\n        res.push(n);\n      }\n    }\n    return res;\n  }\n\n  static is(value) {\n    return (value & this._base) !== 0;\n  }\n\n  static has(value, n) {\n    return Notes.is(value) && (value & (1 << n)) !== 0;\n  }\n\n  static add(value, n) {\n    return value | (1 << n);\n  }\n\n  static delete(value, ...ns) {\n    for (const n of ns) {\n      value &= ~(1 << n);\n    }\n    return value;\n  }\n}\n","import { rowColToBlock, getRowPositions, getColPositions, getBlockFlattenPositions } from './position';\nimport { Notes } from './notes';\nimport { findNGroupFromLinks } from './utils';\nimport * as positions from './position';\n\nexport const getPosDomains = poses => {\n  const res = {};\n  for (const domain of ['row', 'col', 'block']) {\n    const ds = new Set();\n    poses.forEach(p => ds.add(p[domain]));\n    if (ds.size === 1) {\n      res[domain] = [...ds][0];\n    }\n  }\n  return res;\n};\n\nexport function getPosDigitLinks(cells, poses) {\n  const links = [];\n  for (const pos of poses) {\n    const { value } = positions.getCell(cells, pos);\n    if (!Notes.is(value)) {\n      continue;\n    }\n\n    for (const note of Notes.entries(value)) {\n      links.push([pos, note]);\n    }\n  }\n  return links;\n}\n\nexport function* findNGroup(cells, n, cls) {\n  for (const [domain, getPositions] of [\n    ['row', getRowPositions],\n    ['col', getColPositions],\n    ['block', getBlockFlattenPositions],\n  ]) {\n    for (const idx of positions.indices) {\n      const links = getPosDigitLinks(cells, getPositions(idx));\n      for (const group of findNGroupFromLinks(links, n, cls, { checkClear: n > 1 })) {\n        const poses = group[cls];\n        const notes = group[(cls + 1) % 2];\n        yield {\n          type: 'group',\n          cls,\n          n,\n          domains: cls === 0 ? getPosDomains(poses) : { [domain]: idx },\n          poses,\n          notes,\n          name: ['naked', 'hidden'][cls] + `-${n}-group`,\n        };\n      }\n    }\n  }\n}\n\nexport function eliminateGroup(group, getCell, setCellValue) {\n  if (group.n === 1) {\n    // place value\n    const pos = [...group.poses][0];\n    const d = [...group.notes][0];\n\n    setCellValue(pos, d);\n  } else if (group.cls === 0) {\n    // naked\n    // to eliminate other cells\n    const { row, col, block } = group.domains;\n    const otherPoses = [\n      ...(getRowPositions(row) || []),\n      ...(getColPositions(col) || []),\n      ...(getBlockFlattenPositions(block) || []),\n    ];\n    for (const pos of otherPoses) {\n      const { value } = getCell(pos);\n      if (!Notes.is(value) || group.poses.has(pos)) {\n        continue;\n      }\n\n      setCellValue(pos, Notes.delete(value, ...group.notes));\n    }\n  } else if (group.cls === 1) {\n    // hidden\n    // to eliminate other notes\n    for (const pos of group.poses) {\n      const { value } = getCell(pos);\n      setCellValue(pos, Notes.new(...Notes.entries(value).filter(n => group.notes.has(n))));\n    }\n  }\n}\n\nconst getAToBLinks = (getPositions, getEnd) => (cells, d) => {\n  const links = [];\n  for (let a = 0; a < 9; a++) {\n    for (const pos of getPositions(a)) {\n      const { value } = cells[pos.row][pos.col];\n      if (!Notes.is(value)) {\n        continue;\n      }\n      if (Notes.has(value, d)) {\n        links.push([a, getEnd(pos)]);\n      }\n    }\n  }\n  return links;\n};\n\nconst getRowToColLinks = getAToBLinks(positions.getRowPositions, pos => pos.col);\nconst getRowToBlockLinks = getAToBLinks(positions.getRowPositions, pos => rowColToBlock(pos.row, pos.col));\nconst getColToBlockLinks = getAToBLinks(positions.getColPositions, pos => rowColToBlock(pos.row, pos.col));\n\nconst getPositionsForDigit = (cells, d, positions) => {\n  const poses = [];\n  for (const pos of positions) {\n    const { value } = cells[pos.row][pos.col];\n    if (Notes.is(value) && Notes.has(value, d)) {\n      poses.push(pos);\n    }\n  }\n  return poses;\n};\n\nexport function* findNXGroup(cells, n, types = { rc: true, cr: true, rb: true, br: true, cb: true, bc: true }) {\n  for (let d = 1; d <= 9; d++) {\n    if (types.rc || types.cr) {\n      // row->col\n      const rcLinks = getRowToColLinks(cells, d);\n      if (types.rc) {\n        for (const group of findNGroupFromLinks(rcLinks, n, 0)) {\n          const [rows, cols] = group;\n          const poses = [];\n          let isXWing = true;\n          for (const row of rows) {\n            const rowPositions = getPositionsForDigit(cells, d, positions.getRowPositions(row));\n            if (rowPositions.length !== n) {\n              isXWing = false;\n            }\n            poses.push(...rowPositions);\n          }\n          const name = isXWing ? `${n}-X-Wing` : `${n}-XRC-Group`;\n          yield { name, domain: 'row', effect: 'col', rows, cols, poses: new Set(poses), d };\n        }\n      }\n      // col->row\n      if (types.cr) {\n        for (const group of findNGroupFromLinks(rcLinks, n, 1)) {\n          const [cols, rows] = group;\n          const poses = [];\n          let isXWing = true;\n          for (const col of cols) {\n            const colPositions = getPositionsForDigit(cells, d, positions.getColPositions(col));\n            if (colPositions.length !== n) {\n              isXWing = false;\n            }\n            poses.push(...getPositionsForDigit(cells, d, positions.getColPositions(col)));\n          }\n          const name = isXWing ? `${n}-X-Wing` : `${n}-XCR-Group`;\n          yield { name, domain: 'col', effect: 'row', rows, cols, poses: new Set(poses), d };\n        }\n      }\n    }\n\n    if (types.rb || types.br) {\n      // row->block, 1-xrb-group is claiming\n      const rbLinks = getRowToBlockLinks(cells, d);\n      if (types.rb) {\n        for (const group of findNGroupFromLinks(rbLinks, n, 0)) {\n          const [rows, blocks] = group;\n          const poses = [];\n          for (const row of rows) {\n            poses.push(...getPositionsForDigit(cells, d, positions.getRowPositions(row)));\n          }\n          const name = n === 1 ? 'claiming' : `${n}-XRB-Group`;\n          yield { name, domain: 'row', effect: 'block', rows, blocks, poses: new Set(poses), d };\n        }\n      }\n      // block-row, 1-xbr-group is pointing\n      if (types.br) {\n        for (const group of findNGroupFromLinks(rbLinks, n, 1)) {\n          const [blocks, rows] = group;\n          const poses = [];\n          for (const block of blocks) {\n            poses.push(...getPositionsForDigit(cells, d, positions.getBlockFlattenPositions(block)));\n          }\n          const name = n === 1 ? 'pointing' : `${n}-XBR-Group`;\n          yield { name, domain: 'block', effect: 'row', rows, blocks, poses: new Set(poses), d };\n        }\n      }\n    }\n\n    if (types.cb || types.bc) {\n      // col->block, 1-xcb-group is claiming\n      const cbLinks = getColToBlockLinks(cells, d);\n      if (types.cb) {\n        for (const group of findNGroupFromLinks(cbLinks, n, 0)) {\n          const [cols, blocks] = group;\n          const poses = [];\n          for (const col of cols) {\n            poses.push(...getPositionsForDigit(cells, d, positions.getColPositions(col)));\n          }\n          const name = n === 1 ? 'claiming' : `${n}-XCB-Group`;\n          yield { name, domain: 'col', effect: 'block', cols, blocks, poses: new Set(poses), d };\n        }\n      }\n\n      // block-col, 1-xbc-group is pointing\n      if (types.bc) {\n        for (const group of findNGroupFromLinks(cbLinks, n, 1)) {\n          const [blocks, cols] = group;\n          const poses = [];\n          for (const block of blocks) {\n            poses.push(...getPositionsForDigit(cells, d, positions.getBlockFlattenPositions(block)));\n          }\n          const name = n === 1 ? 'pointing' : `${n}-XBC-Group`;\n          yield { name, domain: 'block', effect: 'col', cols, blocks, poses: new Set(poses), d };\n        }\n      }\n    }\n  }\n}\n\nexport function eliminateXGroup(group, getCell, setCellValue) {\n  const otherPositions = [];\n  if (group.effect === 'row') {\n    for (const row of group.rows) {\n      otherPositions.push(...getRowPositions(row));\n    }\n  } else if (group.effect === 'col') {\n    for (const col of group.cols) {\n      otherPositions.push(...getColPositions(col));\n    }\n  } else if (group.effect === 'block') {\n    for (const block of group.blocks) {\n      otherPositions.push(...getBlockFlattenPositions(block));\n    }\n  }\n\n  for (const pos of otherPositions) {\n    const { value } = getCell(pos);\n    if (!Notes.is(value) || group.poses.has(pos)) {\n      continue;\n    }\n\n    setCellValue(pos, Notes.delete(value, group.d));\n  }\n}\n","import * as positions from './position';\nimport { Notes, digits } from './notes';\nimport { findNGroup } from './logic';\n// import { findNXGroup } from './logic';\nimport { console } from './utils';\n\nconst initValue = Notes.new(...digits);\n\nexport const solve = cells => {\n  const xCells = positions.newCells(() => ({ value: initValue }));\n  for (const pos of positions.flattenPositions) {\n    const cell = positions.getCell(cells, pos);\n    if (Notes.is(cell.value)) {\n      continue;\n    }\n\n    // copy origin\n    xCells[pos.row][pos.col].origin = cell.origin;\n\n    if (!setCellValue(xCells, pos, cell.value)) {\n      // unsolvable\n      return [];\n    }\n  }\n\n  const st = new Date();\n  const stat = { search: 0, setCellValue: 0, basicEliminate: 0, eliminate: 0 };\n  const results = [];\n  for (const res of search(xCells, stat)) {\n    const et = new Date();\n    console.log(`#${results.length}>puzzle solving time: ${et - st}ms, ${JSON.stringify(stat)}`);\n    results.push(res);\n    if (results.length > 1) {\n      // multi results\n      break;\n    }\n  }\n  const et = new Date();\n  console.log(`puzzle solving final time: ${et - st}ms, ${JSON.stringify(stat)}`);\n  return results;\n};\n\nfunction* search(cells, stat) {\n  stat && stat.search++;\n  if (isSolved(cells)) {\n    yield cells;\n    return;\n  }\n\n  const [pos, candidates] = chooseNextCell(cells);\n\n  for (const d of candidates) {\n    const nextCells = positions.copyCells(cells);\n\n    if (!(setCellValue(nextCells, pos, d, stat) && eliminate(nextCells, stat))) {\n      continue;\n    }\n\n    yield* search(nextCells, stat);\n  }\n}\n\nconst isSolved = cells => {\n  for (const pos of positions.flattenPositions) {\n    const { value } = positions.getCell(cells, pos);\n    if (Notes.is(value)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst chooseNextCell = cells => {\n  // strategies:\n  // #1. choose the unplaced cell with the fewest candidates.\n  // #2. choose the next unplaced cell.\n  // *#3. random\n\n  // #1.\n  let xpos;\n  let xvals;\n  let minLen = 10;\n  for (const pos of positions.flattenPositions) {\n    const { value } = positions.getCell(cells, pos);\n    if (!Notes.is(value)) {\n      continue;\n    }\n    const vals = Notes.entries(value);\n    // #3.\n    // xpos = pos;\n    // xvals = vals;\n    // if (Math.random() > 0.5) {\n    //   break;\n    // }\n    // #1.\n    if (vals.length < minLen) {\n      xpos = pos;\n      xvals = vals;\n      minLen = vals.length;\n    }\n\n    // #2.\n    // return [pos, vals];\n  }\n\n  // #1.#3.\n  return [xpos, xvals];\n};\n\nconst setCellValue = (cells, pos, d, stat) => {\n  stat && stat.setCellValue++;\n  const { value } = positions.getCell(cells, pos);\n  if (!Notes.has(value, d)) {\n    // can't set d at pos as candidates don't contain d.\n    return false;\n  }\n\n  // assign  d\n  cells[pos.row][pos.col].value = d;\n\n  return basicEliminate(cells, positions.getRelatedPositions(pos), d, stat);\n};\n\nconst basicEliminate = (cells, poses, d, stat) => {\n  stat && stat.basicEliminate++;\n  // basic: eliminate d from related positions.\n  for (const rpos of poses) {\n    const { value } = positions.getCell(cells, rpos);\n    if (!Notes.has(value, d)) {\n      continue;\n    }\n\n    // eliminate\n    const newValue = Notes.delete(value, d);\n    if (Notes.isEmpty(newValue)) {\n      // empty cell\n      return false;\n    }\n    cells[rpos.row][rpos.col].value = newValue;\n  }\n  return true;\n};\n\n// logic eliminate\nconst eliminate = (cells, stat) => {\n  stat && stat.eliminate++;\n  let changed;\n  do {\n    changed = false;\n\n    // 1. naked/hidden single\n    // 0:naked, 1:hidden\n    for (const cls of [0, 1]) {\n      for (const group of findNGroup(cells, 1, cls)) {\n        const pos = [...group.poses][0];\n        const d = [...group.notes][0];\n        if (!setCellValue(cells, pos, d, stat)) {\n          return false;\n        }\n        changed = true;\n      }\n    }\n\n    // 2. pointing/claiming\n    // for (const group of findNXGroup(cells, 1, { br: true, bc: true, rb: true, cb: true })) {\n    //   const effectedPoses = [];\n    //   if (group.effect === 'row') {\n    //     for (const row of group.rows) {\n    //       effectedPoses.push(...positions.getRowPositions(row));\n    //     }\n    //   } else if (group.effect === 'col') {\n    //     for (const col of group.cols) {\n    //       effectedPoses.push(...positions.getColPositions(col));\n    //     }\n    //   } else if (group.effect === 'block') {\n    //     for (const block of group.blocks) {\n    //       effectedPoses.push(...positions.getBlockFlattenPositions(block));\n    //     }\n    //   }\n    //   if (\n    //     !basicEliminate(\n    //       cells,\n    //       effectedPoses.filter(p => !group.poses.has(p)),\n    //       group.d,\n    //       stat\n    //     )\n    //   ) {\n    //     return false;\n    //   }\n    //   changed = true;\n    // }\n  } while (changed);\n  return true;\n};\n","import {\n  flattenPositions,\n  getRelatedPositions,\n  mapPositionsTo,\n  getRelatedRowPositions,\n  getRelatedColPositions,\n  getRelatedBlockPositions,\n  getRowPositions,\n  getColPositions,\n  getBlockFlattenPositions,\n} from './position';\nimport * as positions from './position';\nimport { aggregateLinks, console, getAttrDefault, shuffleArray, findALSFromPoints, intersection } from './utils';\nimport { Notes, digits } from './notes';\nimport { findNGroup, eliminateGroup, findNXGroup, eliminateXGroup, getPosDigitLinks, getPosDomains } from './logic';\nimport { solve } from './solver';\n\nexport * from './notes';\n\nexport class Sudoku {\n  static defaultPuzzle = `\n  000000000 000000000 000000000\n  000000000 000000000 000000000\n  000000000 000000000 000000000\n `;\n  constructor(puzzle) {\n    this._shouldNotify = true;\n    this.subscribers = [];\n    this._setPuzzle(puzzle || Sudoku.defaultPuzzle);\n    this._chainCheckMemo = { x: {}, xy: {} };\n  }\n\n  _setPuzzle(puzzle) {\n    // clear history\n    this._cellsHistory = [];\n    this._curCellsIdx = -1;\n    this._txCells = null;\n    this._historyLowerBound = 0;\n    const parsedCells = Sudoku.parse(puzzle);\n    if (puzzle !== Sudoku.defaultPuzzle) {\n      this._results = solve(parsedCells);\n    }\n\n    this._setCells(parsedCells, 'init');\n    this.puzzle = this.stringify();\n    this._notify();\n  }\n\n  get results() {\n    return this._results;\n  }\n\n  solve() {\n    if (this._results && this._results.length > 0) {\n      // choose the first result.\n      this._setCells(this._results[0], 'solve');\n      this._notify();\n    }\n  }\n\n  setHistoryLowerBound(n) {\n    this._historyLowerBound = n;\n  }\n\n  clearHistoryLowerBound() {\n    this._historyLowerBound = 0;\n  }\n\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  get initialPuzzle() {\n    return this.puzzle;\n  }\n\n  get cells() {\n    return this._cellsHistory[this._curCellsIdx].cells;\n  }\n\n  get cellsRecord() {\n    return this._cellsHistory[this._curCellsIdx];\n  }\n\n  get curIdx() {\n    return this._curCellsIdx;\n  }\n\n  get lastIdx() {\n    return this._cellsHistory.length - 1;\n  }\n\n  _cut() {\n    if (this._curCellsIdx + 1 < this._cellsHistory.length) {\n      this._cellsHistory = this._cellsHistory.slice(0, this._curCellsIdx + 1);\n    }\n  }\n\n  _setCells(cells, action, payload = {}) {\n    this._cut();\n    this._curCellsIdx++;\n    this._cellsHistory.push({\n      idx: this._curCellsIdx,\n      cells,\n      action,\n      payload,\n      get desc() {\n        return `[${action}] ${payload.name || ''}`;\n      },\n    });\n  }\n\n  get hasPrev() {\n    return this._curCellsIdx > 0;\n  }\n\n  get hasNext() {\n    return this._curCellsIdx < this._cellsHistory.length - 1;\n  }\n\n  jumpTo = (idx, revert = false) => {\n    if (idx < this._historyLowerBound) {\n      // can't set lower than lower bound.\n      return;\n    }\n\n    this._curCellsIdx = idx;\n\n    if (this._curCellsIdx < 0) {\n      this._curCellsIdx = 0;\n    } else if (this._curCellsIdx >= this._cellsHistory.length) {\n      this._curCellsIdx = this._cellsHistory.length - 1;\n    }\n    if (revert) {\n      this._cut();\n    }\n\n    this._rollback();\n\n    this._notify();\n  };\n\n  revertTo = idx => {\n    this.jumpTo(idx, true);\n  };\n\n  jump = steps => {\n    this.jumpTo(this.curIdx + steps);\n  };\n\n  jumpToFirst = () => {\n    this.jumpTo(0);\n  };\n\n  jumpToLast = () => {\n    this.jumpTo(this.lastIdx);\n  };\n\n  subscribe(f) {\n    this.subscribers.push(f);\n  }\n\n  unsubscribe(f) {\n    this.subscribers = this.subscribers.filter(s => s !== f);\n  }\n\n  _disableNotify() {\n    this._shouldNotify = false;\n  }\n\n  _enableNotify() {\n    this._shouldNotify = true;\n  }\n\n  _notify() {\n    if (this._shouldNotify) {\n      this._checkComplete();\n      for (const f of this.subscribers) {\n        f(n => n + 1);\n      }\n    }\n  }\n\n  static cellPattern = /(\\d)|(p\\d)|(n[1-9]*N)|\\./g;\n  static valuePattern = /^[1-9]$/;\n\n  static parse(puzzle) {\n    if (!puzzle || puzzle.length < 81) {\n      throw new Error(`bad sudoku puzzle format [${puzzle}]`);\n    }\n    // split cell\n    const flattenCells = puzzle.match(Sudoku.cellPattern);\n    if (flattenCells.length !== 81) {\n      throw new Error(`bad sudoku puzzle format [${puzzle}]`);\n    }\n\n    // parse values\n    const flattenCellValues = flattenCells.map(cell => {\n      if (cell.startsWith('n') && cell.endsWith('N')) {\n        // it's note\n        const notes = cell\n          .slice(1, -1)\n          .split('')\n          .map(s => parseInt(s));\n        return { value: Notes.new(...notes) };\n      } else if (cell.startsWith('p')) {\n        // it's placed value\n        return { value: parseInt(cell[1]) };\n      } else if (Sudoku.valuePattern.test(cell)) {\n        // it's value\n        return {\n          value: parseInt(cell),\n          // puzzle origin value\n          origin: true,\n        };\n      } else if (cell === '0' || cell === '.') {\n        // it's empty\n        return { value: Notes.new() };\n      }\n      throw new Error('impossible');\n    });\n\n    // organize the values\n    const cells = positions.newCells();\n    for (const pos of positions.flattenPositions) {\n      cells[pos.row][pos.col] = flattenCellValues[pos.idx];\n    }\n    // TODO: check board integrity, no duplicated digit in any row, col, block.\n    return cells;\n  }\n\n  stringify(cells, options = {}) {\n    options = { placedAsOrigin: false, withNotes: true, originAsPlaced: false, ...options };\n    cells = cells || this.cells;\n    const res = [];\n    for (const pos of flattenPositions) {\n      const { origin, value } = cells[pos.row][pos.col];\n      if (Notes.is(value)) {\n        if (!options.withNotes) {\n          res.push('0');\n          continue;\n        }\n\n        // notes\n        if (Notes.isEmpty(value)) {\n          res.push('0');\n        } else {\n          res.push('n', ...Notes.entries(value), 'N');\n        }\n      } else if ((options.placedAsOrigin || origin) && !options.originAsPlaced) {\n        // origin\n        res.push(value);\n      } else {\n        // placed\n        res.push('p', value);\n      }\n    }\n    return res.join('');\n  }\n\n  // calcuate available digits for cell at postion <pos>.\n  calcAvailableDigits(pos) {\n    const res = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    if (!pos) {\n      return res;\n    }\n\n    const cell = this.getCell(pos);\n    if (cell.origin) {\n      // origin can't be changed\n      return new Set();\n    }\n\n    for (const rpos of getRelatedPositions(pos)) {\n      const { value } = this.getCell(rpos);\n      if (!Notes.is(value)) {\n        res.delete(value);\n      }\n    }\n    return res;\n  }\n\n  calcRemainingDigits() {\n    const res = { 1: 9, 2: 9, 3: 9, 4: 9, 5: 9, 6: 9, 7: 9, 8: 9, 9: 9 };\n    for (const pos of flattenPositions) {\n      const { value } = this.getCell(pos);\n      if (!Notes.is(value)) {\n        res[value]--;\n      }\n    }\n    return res;\n  }\n\n  calcAvailablePositions(d) {\n    if (!(d >= 1 && d <= 9)) {\n      return null;\n    }\n\n    const res = mapPositionsTo(() => true);\n    for (const pos of flattenPositions) {\n      const { value } = this.getCell(pos);\n      if (!Notes.is(value)) {\n        res[pos.row][pos.col] = false;\n        if (value === d) {\n          // clear\n          for (const { row, col } of getRelatedPositions(pos)) {\n            res[row][col] = false;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  _txSetCellValue(pos, value) {\n    const { row, col } = pos;\n    const { value: oldValue } = this.getCell(pos);\n    if (value === oldValue) {\n      return;\n    }\n\n    this._startTx();\n    const curCells = this.getCurCells();\n    if (this._txCells === curCells) {\n      this._txCells = [...curCells];\n    }\n    if (this._txCells[row] === curCells[row]) {\n      this._txCells[row] = [...curCells[row]];\n    }\n    if (this._txCells[row][col] === curCells[row][col]) {\n      this._txCells[row][col] = { ...curCells[row][col] };\n    }\n    this._txCells[row][col].value = value;\n    if (!Notes.is(value)) {\n      // updated related notes\n      for (const rpos of getRelatedPositions(pos)) {\n        const cell = this.getCell(rpos);\n        if (!Notes.is(cell.value)) {\n          // is not notes\n          continue;\n        }\n        this._eliminate(rpos, value);\n      }\n    }\n  }\n\n  _eliminate(pos, ...ds) {\n    const { value } = this.getCell(pos);\n    this._txSetCellValue(pos, Notes.delete(value, ...ds));\n  }\n\n  getCurCells = () => {\n    if (this._txCells) {\n      // in transaction\n      return this._txCells;\n    }\n    return this.cells;\n  };\n\n  getCell = ({ row, col }) => {\n    return this.getCurCells()[row][col];\n  };\n\n  _startTx() {\n    if (!this._txCells) {\n      this._txCells = this.getCurCells();\n    }\n  }\n\n  _commit(action, payload) {\n    if (this._txCells && this._txCells !== this.cells) {\n      this._setCells(this._txCells, action, payload);\n      this._txCells = null;\n      this._notify();\n    }\n  }\n\n  _rollback() {\n    this._txCells = null;\n  }\n\n  _setCellValue = (pos, value) => {\n    this._txSetCellValue(pos, value);\n  };\n\n  // actions\n  static actions = {\n    RESET: 'Reset',\n    NOTE: 'Note',\n    UPDATE_CELL_VALUE: 'Update Cell',\n    AUTO_NOTE: 'Auto Note',\n    AUTO_POINTING: 'Auto Pointing',\n    AUTO_CLAIMING: 'Auto Claiming',\n    AUTO_PLACE: 'Auto Place',\n    AUTO_PLACE_POINTING_CLAIMING: 'Auto Place/Pointing/Claiming',\n    ELIMINATE_GROUP: 'X Group',\n    ELIMINATE_XGROUP: 'X XGroup',\n    ELIMINATE_CHAIN: 'X Chain',\n    ELIMINATE_TRIAL_ERROR: 'X Trial Error',\n    HANDLE_TIP: 'Handle Tip',\n  };\n\n  _handlActions(action, payload) {\n    switch (action) {\n      case Sudoku.actions.RESET:\n        this._setPuzzle(this.puzzle);\n        break;\n      case Sudoku.actions.NOTE:\n        this._note(payload);\n        break;\n      case Sudoku.actions.AUTO_NOTE:\n        this._autoNote();\n        break;\n      case Sudoku.actions.AUTO_PLACE:\n        this._autoPlace();\n        break;\n      case Sudoku.actions.AUTO_POINTING:\n        this._autoPointing();\n        break;\n      case Sudoku.actions.AUTO_CLAIMING:\n        this._autoClaiming();\n        break;\n      case Sudoku.actions.AUTO_PLACE_POINTING_CLAIMING:\n        this._autoPlacePointingClaiming();\n        break;\n      case Sudoku.actions.UPDATE_CELL_VALUE:\n        this._updateCellValue(payload);\n        break;\n      case Sudoku.actions.ELIMINATE_GROUP:\n        eliminateGroup(payload, this.getCell, this._setCellValue);\n        break;\n      case Sudoku.actions.ELIMINATE_XGROUP:\n        eliminateXGroup(payload, this.getCell, this._setCellValue);\n        break;\n      case Sudoku.actions.ELIMINATE_CHAIN:\n        this._eliminateChain(payload);\n        break;\n      case Sudoku.actions.ELIMINATE_TRIAL_ERROR:\n        this._eliminateTrialError(payload);\n        break;\n      case Sudoku.actions.HANDLE_TIP:\n        this._handleTip(payload);\n        break;\n      default:\n        break;\n    }\n  }\n\n  dispatch(action, payload, options) {\n    options = { commit: true, log: true, ...(options || {}) };\n    if (options.log) {\n      console.group(`[${action}]`);\n      payload && console.log('->payload:', payload);\n      options && console.log('->options:', options);\n    }\n\n    this._startTx();\n    this._handlActions(action, payload);\n\n    if (options.log) {\n      console.groupEnd();\n    }\n\n    if (options.commit) {\n      this._commit(action, payload);\n    }\n  }\n\n  reset() {\n    this.dispatch(Sudoku.actions.RESET);\n  }\n\n  note(pos) {\n    this.dispatch(Sudoku.actions.NOTE, pos);\n  }\n\n  updateCellValue(isNoting, pos, value, type) {\n    this.dispatch(Sudoku.actions.UPDATE_CELL_VALUE, {\n      isNoting,\n      pos,\n      value,\n      name: `${type || (isNoting ? 'note' : 'place')} ${value}@${pos}`,\n    });\n  }\n\n  autoNote() {\n    this.dispatch(Sudoku.actions.AUTO_NOTE);\n  }\n\n  autoPlacePointingClaiming() {\n    this.dispatch(Sudoku.actions.AUTO_PLACE_POINTING_CLAIMING);\n  }\n\n  autoPlace() {\n    this.dispatch(Sudoku.actions.AUTO_PLACE);\n  }\n\n  autoPointing() {\n    this.dispatch(Sudoku.actions.AUTO_POINTING);\n  }\n\n  autoClaiming() {\n    this.dispatch(Sudoku.actions.AUTO_CLAIMING);\n  }\n\n  eliminateGroup(group) {\n    this.dispatch(Sudoku.actions.ELIMINATE_GROUP, group);\n  }\n\n  eliminateXGroup(group) {\n    this.dispatch(Sudoku.actions.ELIMINATE_XGROUP, group);\n  }\n\n  eliminateChain(chain) {\n    this.dispatch(Sudoku.actions.ELIMINATE_CHAIN, chain);\n  }\n\n  eliminateTrialError(res) {\n    this.dispatch(Sudoku.actions.ELIMINATE_TRIAL_ERROR, res);\n  }\n\n  handleTip(tip) {\n    this.dispatch(Sudoku.actions.HANDLE_TIP, tip);\n  }\n\n  _checkValidity() {\n    // check every house should has 9 digits\n    for (const [domain, getPositions] of [\n      ['row', getRowPositions],\n      ['col', getColPositions],\n      ['block', getBlockFlattenPositions],\n    ]) {\n      for (const idx of positions.indices) {\n        const errDigits = new Set(digits);\n        for (const pos of getPositions(idx)) {\n          const { value } = this.getCell(pos);\n          if (domain === 'row' && Notes.isEmpty(value)) {\n            // check empty.\n            return { domain: 'cell', cell: pos, digits: new Set() };\n          }\n\n          if (Notes.is(value)) {\n            Notes.entries(value).forEach(v => errDigits.delete(v));\n          } else {\n            errDigits.delete(value);\n          }\n        }\n        if (errDigits.size !== 0) {\n          return { domain, [domain]: idx, digits: errDigits };\n        }\n      }\n    }\n  }\n\n  _checkComplete() {\n    for (const pos of positions.flattenPositions) {\n      const { value } = this.getCell(pos);\n      if (Notes.is(value)) {\n        this._isComplete = false;\n        return false;\n      }\n    }\n    this._isComplete = true;\n    return true;\n  }\n\n  _note(pos) {\n    const { value } = this.getCell(pos);\n    if (!Notes.is(value)) {\n      return;\n    }\n    if (Notes.size(value) > 0) {\n      // only note empty cell. erase before re-note.\n      return;\n    }\n    this._setCellValue(pos, Notes.new(...this.calcAvailableDigits(pos)));\n  }\n\n  _autoNote() {\n    for (const pos of flattenPositions) {\n      this.dispatch(Sudoku.actions.NOTE, pos, { commit: false, log: false });\n    }\n  }\n\n  _autoPlacePointingClaiming() {\n    try {\n      let count = 0;\n      do {\n        count = 0;\n        count += this._autoPlace();\n        this._commit(Sudoku.actions.AUTO_PLACE);\n        count += this._autoPointing();\n        this._commit(Sudoku.actions.AUTO_POINTING);\n        count += this._autoClaiming();\n        this._commit(Sudoku.actions.AUTO_CLAIMING);\n      } while (count > 0);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // auto place naked/hidden single value\n  _autoPlace() {\n    let count = 0;\n    let placed = false;\n\n    console.group('[auto place]');\n    do {\n      placed = false;\n      // 0:naked, 1:hidden\n      for (const cls of [0, 1]) {\n        for (const group of findNGroup(this.getCurCells(), 1, cls)) {\n          this.dispatch(Sudoku.actions.ELIMINATE_GROUP, group, { commit: false });\n          count++;\n          placed = true;\n          break;\n        }\n      }\n    } while (placed);\n    console.groupEnd();\n\n    return count;\n  }\n\n  // block eliminate row/col\n  _autoPointing() {\n    let count = 0;\n    console.group('[auto pointing]');\n    for (const group of findNXGroup(this.getCurCells(), 1, { br: true, bc: true })) {\n      console.log(group);\n      this.dispatch(Sudoku.actions.ELIMINATE_XGROUP, group, { commit: false });\n      count++;\n    }\n    console.groupEnd();\n    return count;\n  }\n\n  // row/col eliminate block\n  _autoClaiming() {\n    let count = 0;\n    console.group('[auto claiming]');\n    for (const group of findNXGroup(this.getCurCells(), 1, { rb: true, cb: true })) {\n      this.dispatch(Sudoku.actions.ELIMINATE_XGROUP, group, { commit: false });\n      count++;\n    }\n    console.groupEnd();\n    return count;\n  }\n\n  _updateCellValue({ isNoting, pos, value }) {\n    if (isNoting) {\n      this._noteCellValue(pos, value);\n    } else {\n      this._placeCellValue(pos, value);\n    }\n  }\n\n  _placeCellValue(pos, value) {\n    const oldCell = this.getCell(pos);\n    if (oldCell.origin) {\n      // can't place origin value\n      return;\n    }\n\n    if (oldCell.value === value) {\n      // cancel current value\n      value = Notes.new();\n    }\n\n    this._setCellValue(pos, value);\n  }\n\n  _noteCellValue(pos, n) {\n    const { value } = this.getCell(pos);\n    if (!Notes.is(value)) {\n      // can't note cell with value.\n      return;\n    }\n\n    // note\n    let notes = value;\n    if (Notes.has(notes, n)) {\n      notes = Notes.delete(notes, n);\n    } else {\n      notes = Notes.add(notes, n);\n    }\n\n    this._setCellValue(pos, notes);\n  }\n\n  findGroup(cells) {\n    for (let n = 1; n <= 8; n++) {\n      // 0:naked group, 1: hidden group\n      for (const cls of [0, 1]) {\n        for (const group of findNGroup(cells, n, cls)) {\n          // only return the first group\n          return group;\n        }\n      }\n    }\n  }\n\n  findXGroup(cells) {\n    for (let n = 1; n <= 8; n++) {\n      for (const group of findNXGroup(cells, n)) {\n        group.type = 'X-Group';\n        return group;\n      }\n    }\n  }\n\n  findTip(options) {\n    options = { trial: true, chain: { withoutALS: false }, ...options };\n    const cells = this.getCurCells();\n    return (\n      this.findGroup(cells) ||\n      this.findXGroup(cells) ||\n      this.findChain(cells, options.chain) ||\n      (options.trial && this.findTrialError())\n    );\n  }\n\n  _handleTip(tip) {\n    if (tip.type === 'group') {\n      this.eliminateGroup(tip);\n    } else if (tip.type === 'X-Group') {\n      this.eliminateXGroup(tip);\n    } else if (tip.type === 'chain') {\n      this.eliminateChain(tip);\n    } else if (tip.type === 'trial-error') {\n      this.eliminateTrialError(tip);\n    }\n  }\n\n  findTrialError() {\n    this._disableNotify();\n    const startIdx = this._curCellsIdx;\n    // randomize positions\n    const poses = shuffleArray(\n      positions.flattenPositions.filter(p => {\n        const { value } = this.getCell(p);\n        return Notes.is(value);\n      })\n    );\n    // sort positions by candidates count.\n    // const poses = positions.flattenPositions\n    //   .filter(p => {\n    //     const { value } = this.getCell(p);\n    //     return Notes.is(value);\n    //   })\n    //   .sort((pa, pb) => {\n    //     const ca = Notes.size(this.getCell(pa).value);\n    //     const cb = Notes.size(this.getCell(pb).value);\n    //     return ca - cb;\n    //   });\n    for (const tryTip of [false, { maxDepth: 15 }, { maxDepth: 25 }, { maxDepth: Number.MAX_VALUE }]) {\n      for (const pos of poses) {\n        const { value } = this.getCell(pos);\n        for (const d of Notes.entries(value)) {\n          console.enabled = true;\n          console.log(`try: ${d}@${pos} ${JSON.stringify(tryTip)}`);\n          console.enabled = false;\n          // start trial for d@pos\n          let deepTried = 0;\n          this.updateCellValue(false, pos, d, 'try');\n          this.autoPlacePointingClaiming();\n          let err = this._checkValidity();\n          if (!err && tryTip) {\n            let tip = this.findTip({ trial: false, chain: { withoutALS: true } });\n            while (tip) {\n              deepTried++;\n              this.handleTip(tip);\n              this.autoPlacePointingClaiming();\n              err = this._checkValidity();\n              if (err) {\n                break;\n              }\n              if (deepTried > tryTip.maxDepth) {\n                break;\n              }\n              tip = this.findTip({ trial: false, chain: { withoutALS: true } });\n            }\n            if (this._checkComplete()) {\n              err = true;\n            }\n          }\n          if (err) {\n            // restore some settings.\n            console.enabled = true;\n            this._enableNotify();\n            const endIdx = this._curCellsIdx;\n            const includedCells = new Set(\n              this._cellsHistory.filter(({ idx }) => idx >= startIdx && idx <= endIdx).map(h => h.cells)\n            );\n            return {\n              startIdx,\n              endIdx,\n              includedCells,\n              pos,\n              d,\n              err,\n              type: 'trial-error',\n              name: `try${deepTried ? '*' + deepTried : ''} ${d}@${pos}`,\n            };\n          }\n          this.jumpTo(startIdx);\n        }\n      }\n    }\n    // revert\n    this.jumpTo(startIdx);\n    this._enableNotify();\n  }\n\n  _eliminateTrialError(res) {\n    const { startIdx, pos, d, err } = res;\n    if (err === true) {\n      // complete\n      return;\n    }\n    this.revertTo(startIdx);\n    this._eliminate(pos, d);\n  }\n\n  findChain(cells, options = {}) {\n    options = { withoutALS: true, ...options };\n    const [dPoses, dGroupPoses, dAlsces, dLinks] = getDigitPosesAndLinks(cells, { alsSizes: [1, 2, 3, 4, 5] });\n    console.log('dPoses:', dPoses);\n    console.log('dGroupPoses:', dGroupPoses);\n    console.log('dAlsces:', dAlsces);\n    console.log('dLinks:', dLinks);\n    // randomize digits.\n    const ds = shuffleArray(digits);\n    // const ds = digits;\n    const baseData = { dLinks, dAlsces, val: false, cells };\n    const singlePosSrcs = [d => dPoses[d]];\n    const basicPosSrcs = [...singlePosSrcs, d => (dGroupPoses[d] || []).filter(p => p.isGroup)];\n    const defaultConfig = {\n      tryDigitLinks: true,\n      tryCellLinks: false,\n      tryGroupLinks: false,\n      tryAlscLinks: false,\n      posSrcs: basicPosSrcs,\n      searchChain: dfsSearchChain,\n      earlyExitLen: 7,\n      checkMemo: this._chainCheckMemo,\n    };\n    // TODO: 在checkMemo的基础上，如果startPos对应的所有可能endPos都checkFailed，则不搜索\n    const stat = { searchChainDFS: 0, checkChainX: 0, checkChainXY: 0 };\n    // without ALS\n    for (const maxLength of [10, 20 /*,Number.MAX_VALUE*/]) {\n      for (const config of [\n        defaultConfig,\n        { ...defaultConfig, tryCellLinks: true },\n        { ...defaultConfig, tryCellLinks: true, tryGroupLinks: true },\n      ]) {\n        for (const getPoses of config.posSrcs) {\n          const extraData = { ...baseData, maxLength, ...config, stat: { ...stat } };\n          for (const d of ds) {\n            extraData.td = d;\n            for (const res of config.searchChain(d, getPoses(d) || [], extraData)) {\n              console.log('chain stat:', maxLength, extraData.stat);\n              return prepareChainResult(res);\n            }\n          }\n          console.log('chain stat:', maxLength, extraData.stat);\n          if (extraData.res) {\n            return prepareChainResult(extraData.res);\n          }\n        }\n      }\n    }\n\n    if (!options.withoutALS) {\n      // with ALS\n      const alscSrcs = [d => Object.values(dAlsces[d] || {})];\n      const allClosedConfig = { ...defaultConfig, tryDigitLinks: false, posSrcs: [] };\n      for (const config of [\n        // pure ALS-chain\n        { ...allClosedConfig, tryAlscLinks: true, maxLength: 15, posSrcs: alscSrcs },\n        {\n          ...defaultConfig,\n          tryDigitLinks: true,\n          tryGroupLinks: true,\n          tryAlscLinks: true,\n          maxLength: 15,\n          posSrcs: basicPosSrcs,\n        },\n      ]) {\n        for (const getPoses of config.posSrcs) {\n          const extraData = { ...baseData, ...config, stat: { ...stat } };\n          for (const d of ds) {\n            extraData.td = d;\n            for (const res of config.searchChain(d, getPoses(d) || [], extraData)) {\n              console.log('als stat:', 15, extraData.stat);\n              return prepareChainResult(res);\n            }\n          }\n          console.log('als stat:', 15, extraData.stat);\n          if (extraData.res) {\n            return prepareChainResult(extraData.res);\n          }\n        }\n      }\n    }\n  }\n\n  _eliminateChain(chain) {\n    for (const pos of chain.effectedPoses) {\n      const { value } = this.getCell(pos);\n      if (chain.keep) {\n        this._eliminate(pos, ...Notes.entries(value).filter(d => d !== chain.d && d !== chain.yd));\n      } else {\n        this._eliminate(pos, chain.d);\n      }\n    }\n  }\n}\n\nconst getPosTypeSign = pos => {\n  return pos.isAlsc ? 'a' : pos.isGroup ? 'g' : 'd';\n};\n\nconst prepareChainResult = res => {\n  res.type = 'chain';\n  const startPos = res.chain[0].pos;\n  const endNode = res.chain[res.chain.length - 1];\n  const endPos = endNode.pos;\n  const d = res.d;\n  let hasMulti = false;\n  let hasGroup = false;\n  let hasALS = false;\n  for (const node of res.chain) {\n    if (node.d !== d) {\n      hasMulti = true;\n    }\n    if (node.pos.isAlsc) {\n      hasALS = true;\n    } else if (node.pos.isGroup) {\n      hasGroup = true;\n    }\n    if (hasMulti && hasGroup && hasALS) {\n      break;\n    }\n  }\n  const parts = [res.chain.length - 1];\n  hasGroup && parts.push('G');\n  hasALS && parts.push('ALS');\n  parts.push(hasMulti ? 'XY' : 'X', 'Chain');\n  parts.push([getPosTypeSign(startPos), getPosTypeSign(endPos), endNode.d === d ? '-x' : '-xy'].join(''));\n  res.name = parts.join('-');\n  return res;\n};\n\nfunction* dfsSearchChain(d, poses, extraData) {\n  for (const pos of poses) {\n    const node = { pos, d, val: extraData.val };\n    for (const res of searchChainDFS([], node, extraData)) {\n      if (res.chain.length < extraData.maxLength) {\n        if (res.chain.length <= extraData.earlyExitLen) {\n          yield res;\n        } else {\n          extraData.res = res;\n          extraData.maxLength = res.chain.length;\n        }\n      }\n    }\n  }\n}\n\nconst checkExistAndEqual = (a, b) => a !== undefined && a === b;\n\nfunction* checkChain(chain, node, extraData) {\n  const { pos, d, val } = node;\n  const { cells, td } = extraData;\n  if (extraData.val === false && val === true && chain.length > 1) {\n    // strong link\n    const startPos = chain[0].pos;\n    const startMemoKey = `${td}@${startPos.key}`;\n    // ignore g->d\n    if (d === td) {\n      const memo = extraData.checkMemo.x[startMemoKey];\n      if (memo && memo.has(pos)) {\n        return;\n      }\n      extraData.stat.checkChainX++;\n\n      // start and end shouldn't be the same position.\n      // check if intersection related positions has d\n      const effectedPoses = new Set();\n      const poses = [...getRealPoses(startPos), ...getRealPoses(pos)];\n\n      for (const cpos of positions.getCommonRelatedPositions(...poses)) {\n        const { value } = positions.getCell(cells, cpos);\n        if (Notes.has(value, d)) {\n          effectedPoses.add(cpos);\n        }\n      }\n      if (effectedPoses.size > 0) {\n        yield { chain: [...chain, node], effectedPoses, d: td };\n      } else {\n        // check failed\n        getAttrDefault(extraData.checkMemo.x, startMemoKey, new Set()).add(pos);\n        getAttrDefault(extraData.checkMemo.x, `${d}@${pos.key}`, new Set()).add(startPos);\n      }\n    } else {\n      const memo = extraData.checkMemo.xy[startMemoKey];\n      const endMemoKey = `${d}@${pos.key}`;\n      if (memo && memo.has(endMemoKey)) {\n        return;\n      }\n      extraData.stat.checkChainXY++;\n\n      let checkOk = false;\n      // xy-chain\n      const poses = getRealPoses(pos);\n      // two types:\n      // 1. same pos\n      if (startPos.key === pos.key && poses.length === 1) {\n        // should only be one position\n\n        const ds = new Set();\n        for (const p of poses) {\n          const { value } = positions.getCell(cells, p);\n          Notes.entries(value).forEach(d => ds.add(d));\n        }\n        ds.delete(d);\n        ds.delete(td);\n        if (ds.size > 0) {\n          checkOk = true;\n          // eliminate other digits of this position\n          yield {\n            chain: [...chain, node],\n            effectedPoses: new Set(poses),\n            // xd\n            d: td,\n            // yd\n            yd: d,\n            effectedDs: ds,\n            keep: true,\n            keepDs: [d, td],\n          };\n        }\n        // 2. different poses\n      } else {\n        const startPoses = getRealPoses(startPos);\n        if (poses.length === 1 && startPoses.length === 1) {\n          // pos is cell then startPos should also be cell.\n          // pos is one of startPos's related positions.\n          const startPos = startPoses[0];\n          const pos = poses[0];\n          if (\n            checkExistAndEqual(pos.row, startPos.row) ||\n            checkExistAndEqual(pos.col, startPos.col) ||\n            checkExistAndEqual(pos.block, startPos.block)\n          ) {\n            const { value } = positions.getCell(cells, pos);\n            if (Notes.has(value, td)) {\n              checkOk = true;\n              yield { chain: [...chain, node], effectedPoses: new Set([pos]), d: td };\n            }\n          }\n        }\n      }\n      if (!checkOk) {\n        // check failed\n        getAttrDefault(extraData.checkMemo.xy, startMemoKey, new Set()).add(endMemoKey);\n        getAttrDefault(extraData.checkMemo.xy, endMemoKey, new Set()).add(startMemoKey);\n      }\n    }\n  }\n}\n\nfunction* genNextChainAndNode(chain, node, extraData) {\n  const { pos, d, val } = node;\n  const { dLinks, dAlsces } = extraData;\n  if (extraData.tryDigitLinks) {\n    // try related links or group links\n    for (const targets of [dLinks[d][pos][val], extraData.tryGroupLinks ? dLinks[d][pos].group[val] : []]) {\n      for (const tpos of targets) {\n        const nextNode = { pos: tpos, val: !val, d };\n\n        if (chainHasNode(chain, nextNode)) {\n          continue;\n        }\n\n        yield [[...chain, node], nextNode];\n      }\n    }\n  }\n\n  if (extraData.tryCellLinks) {\n    // try cell links\n    for (const cd of dLinks[d][pos].cell[val]) {\n      const nextNode = { pos, val: !val, d: cd };\n\n      if (chainHasNode(chain, nextNode)) {\n        continue;\n      }\n\n      yield [[...chain, node], nextNode];\n    }\n  }\n\n  if (extraData.tryAlscLinks) {\n    // try alsc links\n    for (const link of dLinks[d][pos].alsc[val]) {\n      let curNode = null;\n      let nextNode = null;\n      if (val) {\n        // weak link\n        const rcc = link;\n        curNode = { ...node, pos: dAlsces[d][pos] };\n        nextNode = { pos: rcc, val: !val, d: rcc.d };\n      } else {\n        // strong link\n        const { als, alsc } = link;\n        curNode = { ...node, pos: dAlsces[d][pos], als };\n        nextNode = { pos: alsc, val: !val, d: alsc.d, als };\n      }\n      if (chainHasNode(chain, nextNode)) {\n        continue;\n      }\n      yield [[...chain, curNode], nextNode];\n    }\n  }\n}\n\nfunction* searchChainDFS(chain, node, extraData) {\n  extraData.stat.searchChainDFS++;\n  // optimize\n  if (chain.length + 1 >= extraData.maxLength) {\n    return;\n  }\n\n  yield* checkChain(chain, node, extraData);\n\n  for (const nextChainAndNode of genNextChainAndNode(chain, node, extraData)) {\n    yield* searchChainDFS(...nextChainAndNode, extraData);\n  }\n}\n\n/*\nfunction* searchChainBFS(qs, extraData) {\n  while (qs.length > 0) {\n    const chain = qs.shift();\n    if (chain.length + 1 > extraData.maxLength) {\n      continue;\n    }\n\n    const node = chain.pop();\n\n    yield* checkChain(chain, node, extraData);\n\n    for (const nextChainAndNode of genNextChainAndNode(chain, node, extraData)) {\n      const [chain, nextNode] = nextChainAndNode;\n      qs.push([...chain, nextNode]);\n    }\n  }\n}\n*/\n\nconst chainHasNode = (chain, node) => {\n  const poses = getRealPoses(node.pos);\n  for (const n of chain) {\n    if (n.val === node.val && n.d === node.d && n.pos.key === node.pos.key) {\n      return true;\n    }\n    // FIXME:\n    if (n.d === node.d && n.val && node.val) {\n      if (n.pos.poses || node.pos.poses) {\n        if (hasCommon(poses, getRealPoses(n.pos))) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nconst newGroupPos = (domain, val, block, poses, d) => {\n  if (poses.length > 1) {\n    return {\n      key: `${d}@${domain}${val}block${block}`,\n      d,\n      isGroup: true,\n      domain: new Set([domain]),\n      [domain]: val,\n      block,\n      poses,\n      toString() {\n        return this.key;\n      },\n    };\n  }\n  const pos = poses[0];\n  return {\n    key: pos.key,\n    d,\n    isGroup: false,\n    domain: new Set([domain]),\n    [domain]: val,\n    block,\n    pos,\n    poses,\n    toString() {\n      return this.key;\n    },\n  };\n};\n\nexport const getRealPoses = pos => (pos.isGroup || pos.isAlsc ? [...pos.poses] : [pos]);\n\n// for row/col in block, like claiming.\nfunction getDigitGroupPoses(cells) {\n  const dGroupPoses = {};\n  for (const [domain, xPositions] of [\n    ['row', positions.rowPositions],\n    ['col', positions.colPositions],\n  ]) {\n    for (const xPoses of xPositions) {\n      const blockDigitPoses = {};\n      let val = 0;\n      for (const pos of xPoses) {\n        val = pos[domain];\n        const { value } = positions.getCell(cells, pos);\n        if (!Notes.is(value)) {\n          continue;\n        }\n        const digitPoses = getAttrDefault(blockDigitPoses, pos.block, {});\n        for (const d of Notes.entries(value)) {\n          const poses = getAttrDefault(digitPoses, d, []);\n          poses.push(pos);\n        }\n      }\n      for (const [sblock, digitGroups] of Object.entries(blockDigitPoses)) {\n        for (const [sd, poses] of Object.entries(digitGroups)) {\n          const block = parseInt(sblock);\n          const d = parseInt(sd);\n          const groupPoses = getAttrDefault(dGroupPoses, d, []);\n          if (poses.length > 1) {\n            groupPoses.push(newGroupPos(domain, val, block, poses, d));\n          } else {\n            const pos = poses[0];\n            let groupPos = groupPoses.filter(gp => gp.pos === pos)[0];\n            if (!groupPos) {\n              groupPos = newGroupPos(domain, val, block, poses, d);\n              groupPoses.push(groupPos);\n            }\n            groupPos.domain.add(domain);\n            groupPos[domain] = val;\n          }\n        }\n      }\n    }\n  }\n  return dGroupPoses;\n}\n\nconst hasCommon = (a, b) => {\n  return intersection(new Set(a), new Set(b)).size > 0;\n};\n\nconst getOtherRowGroupPositions = (groupPoses = [], pos) => {\n  return groupPoses.filter(p => pos.row !== undefined && p.row === pos.row && p.key !== pos.key);\n};\n\nconst getOtherColGroupPositions = (groupPoses = [], pos) => {\n  return groupPoses.filter(p => pos.col !== undefined && p.col === pos.col && p.key !== pos.key);\n};\n\nconst getOtherBlockGroupPositions = (groupPoses = [], pos) => {\n  const filteredGroupPoses = groupPoses.filter(\n    p => p.block === pos.block && p.key !== pos.key && !hasCommon(p.poses, pos.isGroup ? pos.poses : [pos])\n  );\n  const res = filteredGroupPoses.filter(p => p.isGroup);\n  for (const p of filteredGroupPoses.filter(p => !p.isGroup)) {\n    let ok = true;\n    for (const rpos of res) {\n      if (hasCommon(rpos.poses, p.poses)) {\n        ok = false;\n        break;\n      }\n    }\n    if (ok) {\n      res.push(p);\n    }\n  }\n  return res;\n};\n\nfunction getGroupPosLink(groupPoses, pos) {\n  // strong: false->true, weak: true->false\n  const strongTargets = new Set();\n  const weakTargets = new Set();\n  for (const [domain, getOtherGroupPositions] of [\n    ['row', getOtherRowGroupPositions],\n    ['col', getOtherColGroupPositions],\n    ['block', getOtherBlockGroupPositions],\n  ]) {\n    if (pos.isGroup && domain !== 'block' && !pos.domain.has(domain)) {\n      continue;\n    }\n\n    let count = 0;\n    let strongPos = null;\n    for (const opos of getOtherGroupPositions(groupPoses, pos)) {\n      count++;\n      if (opos.isGroup) {\n        if (pos.isGroup) {\n          // group pos\n          weakTargets.add(opos);\n          strongPos = opos;\n        } else if (!new Set(opos.poses).has(pos)) {\n          // pos\n          weakTargets.add(opos);\n          strongPos = opos;\n        }\n      }\n    }\n    if (count === 1 && strongPos) {\n      strongTargets.add(strongPos);\n    }\n  }\n  return { false: strongTargets, true: weakTargets };\n}\n\nfunction getPosLink(cells, d, pos) {\n  // strong: false->true, weak: true->false\n  const strongTargets = new Set();\n  const weakTargets = new Set();\n  for (const [domain, getRelatedPositions] of [\n    ['row', getRelatedRowPositions],\n    ['col', getRelatedColPositions],\n    ['block', getRelatedBlockPositions],\n  ]) {\n    let spos = pos;\n    let filterPoses = new Set();\n    if (pos.isGroup) {\n      if (domain !== 'block' && !pos.domain.has(domain)) {\n        continue;\n      }\n      spos = pos.poses[0];\n      filterPoses = new Set(pos.poses);\n    }\n\n    let count = 0;\n    let strongPos = null;\n    for (const rpos of getRelatedPositions(spos).filter(p => !filterPoses.has(p))) {\n      const { value } = positions.getCell(cells, rpos);\n      if (!Notes.has(value, d)) {\n        continue;\n      }\n      weakTargets.add(rpos);\n      count++;\n      strongPos = rpos;\n    }\n    if (count === 1) {\n      strongTargets.add(strongPos);\n    }\n  }\n  return { false: strongTargets, true: weakTargets };\n}\n\nfunction getAlscLink(alscLinks = {}, pos) {\n  return alscLinks[pos];\n}\n\nfunction getDigitPosesAndLinks(cells, options) {\n  const dGroupPoses = getDigitGroupPoses(cells);\n  const [dAlsces, dAlscLinks] = getDigitAlscAndLinks(cells, dGroupPoses, options);\n  const dLinks = {};\n  const dPoses = {};\n  for (const pos of positions.flattenPositions) {\n    const { value } = positions.getCell(cells, pos);\n    if (!Notes.is(value)) {\n      continue;\n    }\n    const ds = Notes.entries(value);\n    for (const d of ds) {\n      const poses = getAttrDefault(dPoses, d, []);\n      poses.push(pos);\n\n      const links = getAttrDefault(dLinks, d, {});\n      // same digit, different poses\n      const link = getPosLink(cells, d, pos);\n      links[pos] = link;\n\n      // group\n      link.group = getGroupPosLink(dGroupPoses[d], pos);\n\n      const otherDs = new Set(ds.filter(v => v !== d));\n      // different digits, same pos\n      link.cell = { false: ds.length === 2 ? otherDs : new Set(), true: otherDs };\n\n      link.alsc = getAlscLink(dAlscLinks[d], pos) || { false: new Set(), true: new Set() };\n    }\n  }\n  // group position links\n  for (const [sd, groupPoses] of Object.entries(dGroupPoses)) {\n    const d = parseInt(sd);\n    const links = getAttrDefault(dLinks, d, {});\n    for (const pos of groupPoses.filter(p => p.isGroup)) {\n      const link = getPosLink(cells, d, pos);\n      links[pos] = link;\n      link.group = getGroupPosLink(dGroupPoses[d], pos);\n      link.cell = { false: new Set(), true: new Set() };\n      link.alsc = getAlscLink(dAlscLinks[d], pos) || { false: new Set(), true: new Set() };\n    }\n  }\n\n  // alsc position links\n  for (const [sd, alsces] of Object.entries(dAlsces)) {\n    const d = parseInt(sd);\n    const links = getAttrDefault(dLinks, d, {});\n    for (const alsc of Object.values(alsces).filter(a => a.type === 'alsc')) {\n      const link = { false: new Set(), true: new Set() };\n      links[alsc] = link;\n      link.group = { false: new Set(), true: new Set() };\n      link.cell = { false: new Set(), true: new Set() };\n      link.alsc = getAlscLink(dAlscLinks[d], alsc) || { false: new Set(), true: new Set() };\n    }\n  }\n\n  return [dPoses, dGroupPoses, dAlsces, dLinks];\n}\n\nconst findGroupForALSC = (d, dGroupPoses, domains, poses) => {\n  const { row, col, block } = domains;\n  const key = `${d}@row${row}col${col}block${block}`;\n  const groupPoses = dGroupPoses[d].filter(g => g.isGroup && g.key === key && g.poses.size === poses.size);\n  if (groupPoses.length === 1) {\n    return groupPoses[0];\n  }\n};\n\nfunction getDigitALSCes(cells, dGroupPoses, options = {}) {\n  options = { alsSizes: [1, 2, 3, 4, 5, 6, 7, 8], ...options };\n  const alses = {};\n  const dAlsces = {};\n  for (const getPositions of [getRowPositions, getColPositions, getBlockFlattenPositions]) {\n    for (const idx of positions.indices) {\n      const links = getPosDigitLinks(cells, getPositions(idx));\n      const points = Object.values(aggregateLinks(links, 0));\n      for (const n of options.alsSizes) {\n        for (const [poses, digits] of findALSFromPoints(points, n)) {\n          const xlinks = getPosDigitLinks(cells, poses);\n          // build digit infos.\n          const digitInfos = aggregateLinks(xlinks, 1, 'd', 'poses');\n          const key = [...[...poses].map(p => p.key).sort(), [...digits].sort().join('')].join('-');\n          const als = alses[key] || {\n            key,\n            poses,\n            digits,\n            domains: getPosDomains(poses),\n            digitInfos,\n            toString() {\n              return this.key;\n            },\n          };\n          alses[key] = als;\n          for (const d of digits) {\n            const digitInfo = digitInfos[d];\n            const { poses } = digitInfo;\n            const domains = getPosDomains(poses);\n            const alsces = getAttrDefault(dAlsces, d, {});\n            let key = null;\n            let alsc = null;\n            if (poses.size === 1) {\n              const cell = [...poses][0];\n              key = cell.key;\n              alsc = alsces[key] || {\n                ...digitInfo,\n                isAlsc: true,\n                domains,\n                cell,\n                key,\n                type: 'cell',\n                alses: [],\n                toString() {\n                  return this.key;\n                },\n              };\n            } else {\n              const group = findGroupForALSC(d, dGroupPoses, domains, poses);\n              if (group) {\n                key = group.key;\n                alsc = alsces[key] || {\n                  ...digitInfo,\n                  isAlsc: true,\n                  domains,\n                  group,\n                  key: group.key,\n                  type: 'group',\n                  isGroup: true,\n                  alses: [],\n                  toString() {\n                    return this.key;\n                  },\n                };\n              } else {\n                key = [...poses]\n                  .map(p => p.key)\n                  .sort()\n                  .join('-');\n                alsc = alsces[key] || {\n                  ...digitInfo,\n                  isAlsc: true,\n                  domains,\n                  key,\n                  type: 'alsc',\n                  alses: [],\n                  toString() {\n                    return this.key;\n                  },\n                };\n              }\n            }\n            alsc.alses.push(als);\n            alsces[key] = alsc;\n            digitInfos[d] = alsc;\n          }\n        }\n      }\n    }\n  }\n  return dAlsces;\n}\n\nfunction getRCCs(alsces, alsc) {\n  const rccs = [];\n  const { poses, domains } = alsc;\n  // check every domain of the rcc\n  for (const [domain, val] of Object.entries(domains)) {\n    // find d related ALSes in domain\n    for (const rcc of Object.values(alsces)) {\n      if (rcc === alsc) {\n        // should not be current als.\n        continue;\n      }\n      if (rcc.domains[domain] !== val) {\n        // rcc should be in domain\n        continue;\n      }\n      if (hasCommon(rcc.poses, poses)) {\n        // overlapping area should not contain the rcc.\n        continue;\n      }\n\n      rccs.push(rcc);\n    }\n  }\n  return rccs;\n}\n\nfunction getDigitAlscAndLinks(cells, dGroupPoses, options) {\n  const dAlsces = getDigitALSCes(cells, dGroupPoses, options);\n  const dAlscLinks = {};\n  for (const alsces of Object.values(dAlsces)) {\n    for (const alsc of Object.values(alsces)) {\n      const { d, alses } = alsc;\n      const alscLinks = getAttrDefault(dAlscLinks, d, {});\n      const weakTargets = getRCCs(alsces, alsc);\n      const strongTargets = [];\n      for (const als of alses) {\n        for (const t of Object.values(als.digitInfos)) {\n          if (t !== alsc) {\n            strongTargets.push({ als, alsc: t });\n          }\n        }\n      }\n      alscLinks[alsc] = { true: weakTargets, false: strongTargets };\n    }\n  }\n\n  return [dAlsces, dAlscLinks];\n}\n","import React from 'react';\nimport styles from './Cell.module.scss';\nimport digits from '../../../../UI/Digits/Digits';\nimport { Notes } from '../../../../../libs/sudoku';\nimport * as positions from '../../../../../libs/position';\n\nconst noteClassName = (n, activeVal, highlighted, effectMarked, marks, pos) => {\n  const classes = [styles.Note];\n  if (n === activeVal) {\n    classes.push(styles.ActiveValue);\n  }\n\n  if (marks) {\n    let src = null;\n    if (highlighted) {\n      src = marks.highlights;\n    } else if (effectMarked) {\n      src = marks.effect;\n    }\n\n    if (src) {\n      const { posNotes, posSubNotes } = src;\n      let { notes, subNotes } = src;\n      if (posNotes && posSubNotes) {\n        notes = posNotes[pos];\n        subNotes = posSubNotes[pos];\n      }\n      if (notes && notes.has(n)) {\n        classes.push(styles.MarkedNoteValue);\n      } else if (subNotes && subNotes.has(n)) {\n        classes.push(styles.MarkedValue);\n      }\n\n      if (highlighted && effectMarked) {\n        if (marks.effect.notes.has(n)) {\n          classes.push(styles.Effected);\n        }\n      }\n    }\n  }\n\n  return classes.join(' ');\n};\n\nconst Cell = React.memo(\n  ({ value, origin, pos, activePos, activeVal, available, showAvail, isNoting, onClick, marks }) => {\n    const { block, row, col } = pos;\n    const classes = [];\n    let content = null;\n    let isSelected = false;\n\n    if (activePos) {\n      const { row: activeRow, col: activeCol, block: activeBlock } = activePos;\n      if (row === activeRow && col === activeCol) {\n        // active\n        isSelected = true;\n        classes.push(styles.Selected);\n      } else if (row === activeRow || col === activeCol || block === activeBlock) {\n        // related area\n        classes.push(styles.Related);\n      }\n    }\n\n    let clickable = available;\n    if (available) {\n      classes.push(styles.Available);\n      if (showAvail) {\n        // show background\n        classes.push(isNoting ? styles.Note : styles.Place);\n      }\n    } else if (available === null) {\n      // deselected\n      classes.push(styles.Available);\n      clickable = true;\n    } else if (!isNoting && !origin && value === activeVal) {\n      // place mode, placed value === activeVal\n      classes.push(styles.Available);\n      clickable = true;\n    }\n\n    // marks\n    let highlighted = false;\n    let domainMarked = false;\n    let effectMarked = false;\n    if (marks) {\n      const { domain, effect, highlights } = marks;\n      if (domain) {\n        const { rows, cols, blocks, cells } = domain;\n        if (rows && rows.has(row)) {\n          domainMarked = true;\n        }\n        if (cols && cols.has(col)) {\n          domainMarked = true;\n        }\n        if (blocks && blocks.has(block)) {\n          domainMarked = true;\n        }\n        if (cells && cells.has(pos)) {\n          domainMarked = true;\n        }\n      }\n      if (effect) {\n        const { rows, cols, blocks, cells } = effect;\n        if (rows && rows.has(row)) {\n          effectMarked = true;\n        }\n        if (cols && cols.has(col)) {\n          effectMarked = true;\n        }\n        if (blocks && blocks.has(block)) {\n          effectMarked = true;\n        }\n        if (cells && cells.has(pos)) {\n          effectMarked = true;\n        }\n      }\n      if (highlights && highlights.cells.has(pos)) {\n        highlighted = true;\n      }\n    }\n    if (highlighted) {\n      classes.push(styles.MarkedHighlight);\n      if (marks.highlights.withoutOutlinePoses && marks.highlights.withoutOutlinePoses.has(pos)) {\n        classes.push(styles.WithoutOutline);\n      }\n    } else if (domainMarked) {\n      classes.push(styles.MarkedDomain);\n    }\n    if (effectMarked) {\n      classes.push(styles.MarkedEffect);\n    }\n\n    if (!Notes.is(value)) {\n      classes.push(styles.Value);\n      // it's placed value\n      !origin && classes.push(styles.Placed);\n      // it's active value\n      if (value === activeVal && !isSelected) {\n        classes.push(styles.ActiveValue);\n      }\n      // it's marked value\n      if (highlighted && marks.highlights.values && marks.highlights.values.has(value)) {\n        classes.push(styles.MarkedValue);\n      }\n\n      content = digits[value];\n    } else {\n      classes.push(styles.Notes);\n      // Set: [1-9]\n      const notes = value;\n      if (Notes.size(notes) > 0) {\n        content = positions.blockShape.map((rows, idx) => (\n          <div key={idx} className={styles.RowNotes}>\n            {rows.map(i => (\n              <div key={i} className={noteClassName(i + 1, activeVal, highlighted, effectMarked, marks, pos)}>\n                {Notes.has(notes, i + 1) ? digits[i + 1] : null}\n              </div>\n            ))}\n          </div>\n        ));\n      }\n    }\n    return (\n      <div className={classes.join(' ')} onClick={clickable ? () => onClick(pos) : undefined}>\n        {content}\n      </div>\n    );\n  }\n);\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell/Cell';\nimport styles from './Block.module.scss';\nimport * as positions from '../../../../libs/position';\n\nconst Block = ({\n  block,\n  activePos,\n  activeVal,\n  cells,\n  availableCells,\n  cellClickedHandler,\n  showAvail,\n  isNoting,\n  marks,\n}) => {\n  const isOdd = block % 2 === 1;\n  return (\n    <div className={`${styles.Block} ${isOdd ? styles.Odd : ''}`}>\n      {positions.getBlockPositions(block).map((rows, idx) => (\n        <div key={idx} className={styles.Row}>\n          {rows.map(pos => (\n            <Cell\n              key={pos.key}\n              {...positions.getCell(cells, pos)}\n              pos={pos}\n              activePos={activePos}\n              activeVal={activeVal}\n              available={availableCells && availableCells[pos.row][pos.col]}\n              onClick={cellClickedHandler}\n              showAvail={showAvail}\n              isNoting={isNoting}\n              marks={marks}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default Block;\n","import React from 'react';\nimport styled from 'styled-components';\n\n/*\n  make sure the width is the same with a parent's,\n  because padding refer to parent's width.\n*/\nconst Box = styled.div`\n  width: ${({ width }) => (width !== undefined ? width : 'auto')};\n  height: 0;\n  padding-top: ${({ ratio }) => 100 / ratio}%;\n  position: relative;\n`;\n\nconst Content = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  ${({ fixed, scroll }) =>\n    fixed\n      ? `\n    height: 100%;\n    overflow: ${scroll ? `scroll` : 'hidden'};\n  `\n      : `\n  min-height: 100%;\n  `}\n`;\n\nexport default ({ ratio = 1.0, fixed = true, scroll = false, children }) => {\n  return (\n    <Box ratio={ratio}>\n      <Content fixed={fixed} scroll={scroll}>\n        {children}\n      </Content>\n    </Box>\n  );\n};\n","import * as positions from '../../../libs/position';\n\n// percentage for a cell\nexport const perCell = (1 - 1.5 / 100) / 9;\n\nexport const getCoord = ({ row, col }, d) => {\n  const [localRow, localCol] = positions.getDigitLocalPos(d);\n\n  // block margin: 0.25%\n  // cell margin:1%, padding: 2.5% of block\n  const x = (col + (localCol + 0.5) / 3 + 0.35 / 100) * perCell + ((Math.floor(col / 3) + 1) * 0.5 - 0.25) / 100;\n  const y = (row + (localRow + 0.5) / 3 + 0.35 / 100) * perCell + ((Math.floor(row / 3) + 1) * 0.5 - 0.25) / 100;\n\n  return [x, y];\n};\n\nexport const calcDistance = ([sx, sy], [ex, ey]) => {\n  const [dx, dy] = [ex - sx, ey - sy];\n\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\nexport const calcDeg = ([sx, sy], [ex, ey], d) => {\n  const [dx, dy] = [ex - sx, ey - sy];\n  return ((Math.acos(dx / d) * (dy < 0 ? -1 : 1)) / Math.PI) * 180;\n};\n","import React from 'react';\nimport styles from './Arrow.module.scss';\nimport styled from 'styled-components';\nimport * as calc from './calc';\n\n// shortend arrow length, to avoid tail-head contact.\nconst dd = 0.02;\n\nconst Arrow = styled.div.attrs(({ x, y, distance, deg, type }) => ({\n  style: {\n    borderTop: `2px ${type} red`,\n    width: `${distance * 100}%`,\n    height: `${distance * 100}%`,\n    transform: `translate(${(x / distance) * 100}%, ${(y / distance) * 100}%)\n    rotate(${deg}deg)\n    translate(${(dd / 2 / distance) * 100}%)`,\n  },\n}))`\n  user-select: none;\n  pointer-events: none;\n  position: absolute;\n  transform-origin: top left;\n`;\n\nexport default ({ type = 'solid', startPos, startDigit, endPos, endDigit }) => {\n  const sc = calc.getCoord(startPos, startDigit);\n  const ec = calc.getCoord(endPos, endDigit);\n  const distance = calc.calcDistance(sc, ec);\n  const deg = calc.calcDeg(sc, ec, distance);\n\n  return (\n    <Arrow x={sc[0]} y={sc[1]} distance={distance - dd} deg={deg} type={type}>\n      <div className={styles.Pointer}></div>\n    </Arrow>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport * as positions from '../../../libs/position';\nimport * as calc from './calc';\n\nconst dd = 0.8;\n\nconst Frame = styled.div.attrs(({ sx, sy, ex, ey }) => ({\n  style: {\n    top: `${sy * 100 - dd}%`,\n    left: `${sx * 100 - dd}%`,\n    right: `${(1 - ex) * 100 - dd}%`,\n    bottom: `${(1 - ey) * 100 - dd}%`,\n  },\n}))`\n  user-select: none;\n  pointer-events: none;\n  position: absolute;\n  border: 1px solid red;\n`;\n\nexport default ({ domain, row, col, block }) => {\n  let startRow;\n  let startCol;\n  let endRow;\n  let endCol;\n\n  if (domain === 'row') {\n    startRow = endRow = row;\n\n    startCol = positions.blockCols(block)[0];\n    endCol = startCol + 2;\n  } else if (domain === 'col') {\n    startCol = endCol = col;\n\n    startRow = positions.blockRows(block)[0];\n    endRow = startRow + 2;\n  }\n\n  const [sx, sy] = calc.getCoord({ row: startRow, col: startCol }, 1);\n  const [ex, ey] = calc.getCoord({ row: endRow, col: endCol }, 9);\n  return <Frame sx={sx} sy={sy} ex={ex} ey={ey} />;\n};\n","import React from 'react';\nimport Block from './Block/Block';\nimport AspectRatioBox from '../../UI/AspectRatio/AspectRatioBox';\nimport Arrow from './Arrow';\nimport Frame from './Frame';\nimport styles from './Board.module.scss';\nimport * as positions from '../../../libs/position';\n\nconst Board = ({\n  isComplete,\n  availablePositions,\n  cells,\n  activeVal,\n  activePos,\n  cellClickedHandler,\n  showAvail,\n  isNoting,\n  marks,\n}) => {\n  // active value\n  if (activePos) {\n    // no active value, then selected value is active value for board\n    activeVal = positions.getCell(cells, activePos).value;\n  }\n\n  const classes = [styles.SudokuBoard];\n  if (isComplete) {\n    classes.push(styles.Complete);\n  }\n  return (\n    <AspectRatioBox ratio={1.0}>\n      <div className={classes.join(' ')}>\n        {marks && marks.frames && marks.frames.map(frame => <Frame {...frame} />)}\n        {marks &&\n          marks.arrows &&\n          marks.arrows.map((arrow, idx) => <Arrow key={`${arrow.startPos}-${arrow.endPos}#${idx}`} {...arrow} />)}\n        {positions.blockShape.map((rows, idx) => (\n          <div key={idx} className={styles.Row}>\n            {rows.map(b => (\n              <Block\n                key={b}\n                block={b}\n                cells={cells}\n                activePos={activePos}\n                activeVal={activeVal}\n                availableCells={availablePositions}\n                cellClickedHandler={cellClickedHandler}\n                showAvail={showAvail}\n                isNoting={isNoting}\n                marks={marks}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    </AspectRatioBox>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  &::before {\n    content: '';\n    width: 1px;\n    margin-left: -1px;\n    float: left;\n    height: 0;\n    padding-top: ${({ ratio }) => 100 / ratio}%;\n  }\n  &::after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n`;\n\nexport default ({ ratio = 1.0, children, ...props }) => {\n  return (\n    <Wrapper ratio={ratio} {...props}>\n      {children}\n    </Wrapper>\n  );\n};\n","import React, { useCallback } from 'react';\nimport AspectRatioWrapper from '../../../UI/AspectRatio/AspectRatioWrapper';\nimport digits from '../../../UI/Digits/Digits';\nimport styles from './Digits.module.scss';\n\nconst Digits = React.memo(\n  ({\n    isNoting,\n    activeVal,\n    availableDigits,\n    remainingDigits,\n    digitClickedHandler,\n  }) => {\n    const genClassName = useCallback(\n      d => {\n        const classes = [styles.Digit];\n        if (d === activeVal) {\n          classes.push(styles.active);\n        }\n        if (!availableDigits.has(d)) {\n          classes.push(styles.Disabled);\n        }\n        return classes.join(' ');\n      },\n      [activeVal, availableDigits]\n    );\n\n    return (\n      <div className={`${styles.Digits} ${isNoting ? styles.isNoting : ''}`}>\n        <AspectRatioWrapper\n          className={genClassName(1)}\n          onClick={\n            availableDigits.has(1) ? () => digitClickedHandler(1) : undefined\n          }\n        >\n          {digits[1]}\n          <div className={styles.Count}>{digits[remainingDigits[1]]}</div>\n        </AspectRatioWrapper>\n        {[2, 3, 4, 5, 6, 7, 8, 9].map(d => (\n          <div\n            key={d}\n            className={genClassName(d)}\n            onClick={\n              availableDigits.has(d) ? () => digitClickedHandler(d) : undefined\n            }\n          >\n            {digits[d]}\n            <div className={styles.Count}>{digits[remainingDigits[d]]}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\n\nexport default Digits;\n","import React from 'react';\nimport Digits from './Digits/Digits';\nimport Button from '../../UI/Button/Button';\nimport styles from './Controls.module.scss';\n\nconst Controls = ({\n  cellsRecord,\n  hasPrev,\n  hasNext,\n  jump,\n  jumpToFirst,\n  jumpToLast,\n  remainingDigits,\n  activeVal,\n  availableDigits,\n  digitClickedHandler,\n  showAvail,\n  isNoting,\n  withALS,\n  deselectHandler,\n  toggleShowAvailHandler,\n  toggleIsNotingHandler,\n  toggleWithALSHandler,\n  solveHandler,\n  resetHandler,\n  eraseValueHandler,\n  autoNoteHandler,\n  autoPlacePointingClaimingHandler,\n  tip,\n  tipHandler,\n  cancelTipHandler,\n  changeChainStepHandler,\n  jumpToTrailStartHandler,\n}) => {\n  return (\n    <div className={styles.Controls}>\n      <div className={styles.History}>\n        <Button disabled={!hasPrev} onClick={jumpToFirst}>\n          &lt;&lt;\n        </Button>\n        <Button disabled={!hasPrev} onClick={() => jump(-1)}>\n          &lt;\n        </Button>\n        <Button disabled={!hasNext} onClick={() => jump(1)}>\n          &gt;\n        </Button>\n        <Button disabled={!hasNext} onClick={jumpToLast}>\n          &gt;&gt;\n        </Button>\n        <span>#{cellsRecord.idx}</span>\n        <span>{cellsRecord.desc}</span>\n      </div>\n      <div className={styles.Panel}>\n        <Button onClick={solveHandler}>Solve</Button>\n        <Button onClick={resetHandler}>Reset</Button>\n        <Button onClick={eraseValueHandler}>Erase</Button>\n        <Button onClick={deselectHandler}>Deselect</Button>\n        <Button type={showAvail ? 'On' : 'Off'} onClick={toggleShowAvailHandler}>\n          Avail\n        </Button>\n        <Button type={isNoting ? 'On' : 'Off'} onClick={toggleIsNotingHandler}>\n          Note\n        </Button>\n        <Button type={withALS ? 'On' : 'Off'} onClick={toggleWithALSHandler}>\n          ALS\n        </Button>\n      </div>\n      <Digits\n        isNoting={isNoting}\n        activeVal={activeVal}\n        availableDigits={availableDigits}\n        remainingDigits={remainingDigits}\n        digitClickedHandler={digitClickedHandler}\n      />\n      <div className={styles.Tools}>\n        <Button onClick={autoNoteHandler}>note</Button>\n        <Button onClick={autoPlacePointingClaimingHandler}>place/point/claim</Button>\n        <div className={styles.Tip}>\n          <Button type={tip && 'On'} onClick={tipHandler}>\n            {tip ? tip.name : 'tip'}\n          </Button>\n          {tip && (\n            <Button type={'Warn'} onClick={cancelTipHandler}>\n              X\n            </Button>\n          )}\n          {tip && tip.type === 'chain' && (\n            <>\n              <span className={styles.ChainSteper} onClick={() => changeChainStepHandler(-1)}>\n                &lt;\n              </span>\n              <span className={styles.ChainSteper} onClick={() => changeChainStepHandler(1)}>\n                &gt;\n              </span>\n            </>\n          )}\n          {tip && tip.type === 'trial-error' && (\n            <span className={styles.ChainSteper} onClick={jumpToTrailStartHandler}>\n              &lt;start\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from 'react';\nimport styles from './Backdrop.module.scss';\n\nconst Backdrop = ({ show, onClick, absolute = false }) => {\n  if (!show) {\n    return null;\n  }\n  const classes = [styles.Backdrop];\n  if (absolute) {\n    classes.push(styles.Absolute);\n  }\n  return <div className={classes.join(' ')} onClick={onClick} />;\n};\n\nexport default Backdrop;\n","import React from 'react';\nimport Backdrop from '../Backdrop/Backdrop';\nimport styles from './Modal.module.scss';\n\nconst Modal = ({ show = false, close, children }) => {\n  const classes = [styles.Modal];\n  if (show) {\n    classes.push(styles.Show);\n  }\n  return (\n    <>\n      <Backdrop show={show} onClick={close} />\n      <div className={classes.join(' ')}>\n        <div className={styles.Close} onClick={close}>\n          X\n        </div>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(React.memo(Modal), (prevProps, nextProps) => {\n  return !prevProps.show && !nextProps.show;\n});\n","import React from 'react';\nimport styles from './Spinner.module.css';\n\nconst Spinner = () => {\n  return <div className={styles.Loader}>Loading...</div>;\n};\n\nexport default Spinner;\n","import React from 'react';\nimport styles from './Loading.module.scss';\nimport Backdrop from '../Backdrop/Backdrop';\nimport Spinner from '../Spinner/Spinner';\n\nexport default () => {\n  return (\n    <>\n      <Backdrop show absolute />\n      <div className={styles.Spinner}>\n        <Spinner />\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport Button from '../../components/UI/Button/Button';\nimport Board from '../../components/Sudoku/Board/Board';\nimport Controls from '../../components/Sudoku/Controls/Controls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport Loading from '../../components/UI/Loading/Loading';\nimport QRCode from 'qrcode.react';\nimport styles from './Main.module.scss';\nimport * as sudokus from '../../libs/sudoku';\nimport { Notes } from '../../libs/sudoku';\nimport { getPosition, findClosedPosPair } from '../../libs/position';\nimport { console } from '../../libs/utils';\n\nconst Sudoku = ({\n  /** @type {sudokus.Sudoku} */ sudoku = new sudokus.Sudoku(),\n  startNewGameHandler,\n  newGameHandler,\n  emptyHandler,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showShare, setShowShare] = useState(false);\n  const [, setChanged] = useState(0);\n  useEffect(() => {\n    sudoku.subscribe(setChanged);\n    return () => {\n      sudoku.unsubscribe(setChanged);\n    };\n  }, [sudoku]);\n\n  // {pos:[row, col], val:0}\n  const [activeState, setActiveState] = useState({ pos: null, val: 0 });\n  const { pos: activePos, val: activeVal } = activeState;\n  const [showAvail, setShowAvail] = useState(false);\n  const [isNoting, setIsNoting] = useState(true);\n  const [withALS, setWithALS] = useState(false);\n  const [tip, setTip] = useState(null);\n  const [chainStep, setChainStep] = useState(2);\n\n  // calculated states\n  const cellsRecord = sudoku.cellsRecord;\n  const isComplete = sudoku.isComplete;\n  const { cells: boardCells } = cellsRecord;\n  // cells dependency is needed for memo check\n  const availableDigits = useMemo(() => sudoku.calcAvailableDigits(activePos, boardCells), [\n    activePos,\n    sudoku,\n    boardCells,\n  ]);\n  const availablePositions = useMemo(() => sudoku.calcAvailablePositions(activeVal, boardCells), [\n    activeVal,\n    sudoku,\n    boardCells,\n  ]);\n  const remainingDigits = useMemo(() => sudoku.calcRemainingDigits(boardCells), [sudoku, boardCells]);\n\n  // handlers\n  const startGameHandler = useCallback(() => {\n    newGameHandler(sudoku.stringify(boardCells, { placedAsOrigin: true, withNotes: false }));\n  }, [boardCells, newGameHandler, sudoku]);\n\n  const editGameHandler = useCallback(() => {\n    newGameHandler(sudoku.stringify(boardCells, { originAsPlaced: true, withNotes: false }), false);\n  }, [boardCells, newGameHandler, sudoku]);\n\n  const cellClickedHandler = useCallback(\n    pos => {\n      if (activeVal !== 0) {\n        // place or note\n        sudoku.updateCellValue(isNoting, pos, activeVal);\n      } else {\n        // select position\n        setActiveState(({ pos: curActivePos }) => {\n          if (curActivePos) {\n            if (pos === curActivePos) {\n              // cancel current selected\n              pos = null;\n            }\n          }\n          return { pos, val: 0 };\n        });\n      }\n    },\n    [activeVal, isNoting, sudoku]\n  );\n\n  const digitClickedHandler = useCallback(\n    (d, force = false) => {\n      // force active specified digit\n      if (!force) {\n        if (!availableDigits.has(d)) {\n          return;\n        }\n\n        if (activePos) {\n          // place or note\n          sudoku.updateCellValue(isNoting, activePos, d);\n        } else {\n          // active a value\n          setActiveState(({ val: curActiveVal }) => {\n            let val = d;\n            if (curActiveVal === d) {\n              // cancel active\n              val = 0;\n            }\n            return { pos: null, val };\n          });\n        }\n      } else {\n        // active a value\n        setActiveState({ pos: null, val: d });\n      }\n    },\n    [activePos, availableDigits, isNoting, sudoku]\n  );\n\n  const deselectHandler = useCallback(() => {\n    setActiveState({ pos: null, val: 0 });\n  }, []);\n\n  const solveHandler = useCallback(() => {\n    sudoku.solve();\n  }, [sudoku]);\n\n  const resetHandler = useCallback(() => {\n    if (!window.confirm || window.confirm('Are you sure to reset?')) {\n      sudoku.reset();\n      deselectHandler();\n    }\n  }, [deselectHandler, sudoku]);\n\n  const eraseValueHandler = useCallback(() => {\n    if (activePos) {\n      sudoku.updateCellValue(false, activePos, Notes.new());\n    }\n  }, [activePos, sudoku]);\n\n  const toggleShowAvailHandler = useCallback(() => {\n    setShowAvail(showAvail => !showAvail);\n  }, []);\n\n  const toggleIsNotingHandler = useCallback(() => {\n    setIsNoting(isNoting => !isNoting);\n  }, []);\n\n  const toggleWithALSHandler = useCallback(() => {\n    setWithALS(v => !v);\n  }, []);\n\n  const autoNoteHandler = useCallback(() => {\n    sudoku.autoNote();\n  }, [sudoku]);\n\n  const autoPlacePointingClaimingHandler = useCallback(() => {\n    sudoku.autoPlacePointingClaiming();\n  }, [sudoku]);\n\n  const tipHandler = useCallback(() => {\n    // deselect\n    deselectHandler();\n    if (tip) {\n      // clear\n      setTip(null);\n      sudoku.clearHistoryLowerBound();\n\n      // handle tip\n      sudoku.handleTip(tip);\n    } else {\n      // find tip\n      setIsLoading(true);\n      setTimeout(() => {\n        // for test new tech.\n        // const t = sudoku.findTip({ trial: false });\n        const t = sudoku.findTip({ chain: { withoutALS: !withALS } });\n        setIsLoading(false);\n        if (t) {\n          console.log('tip:', t);\n          setTip(t);\n          if (t.type === 'chain') {\n            setChainStep(t.chain.length);\n          } else if (t.type === 'trial-error') {\n            sudoku.setHistoryLowerBound(t.startIdx);\n            if (t.err !== true && t.err.digits.size > 0) {\n              digitClickedHandler([...t.err.digits][0], true);\n            }\n          }\n        }\n      }, 0);\n    }\n  }, [deselectHandler, digitClickedHandler, sudoku, tip, withALS]);\n\n  const cancelTipHandler = useCallback(() => {\n    if (tip) {\n      // clear\n      setTip(null);\n      if (tip.type === 'trial-error') {\n        sudoku.clearHistoryLowerBound();\n        sudoku.revertTo(tip.startIdx);\n      }\n    }\n  }, [sudoku, tip]);\n\n  const moveActivePos = useCallback(\n    (dRow, dCol) => {\n      if (activePos) {\n        setActiveState(({ pos: { row: curRow, col: curCol } }) => {\n          const pos = getPosition((curRow + 9 + dRow) % 9, (curCol + 9 + dCol) % 9);\n          return { val: 0, pos };\n        });\n      }\n    },\n    [activePos]\n  );\n\n  const moveActiveVal = useCallback(\n    d => {\n      if (activeVal) {\n        setActiveState(({ val: curVal }) => {\n          const val = ((curVal - 1 + d + 9) % 9) + 1;\n          return { pos: null, val };\n        });\n      }\n    },\n    [activeVal]\n  );\n\n  const marks = useMemo(() => {\n    if (tip) {\n      if (tip.type === 'group') {\n        const { cls, domains, poses: cells, notes } = tip;\n        const domainInfo = {};\n        for (const [domain, value] of Object.entries(domains)) {\n          domainInfo[domain + 's'] = new Set([value]);\n        }\n\n        if (cls === 0) {\n          // naked\n          return { effect: { ...domainInfo, notes }, highlights: { cells, notes } };\n        } else if (cls === 1) {\n          // hidden\n          return { domain: { ...domainInfo, notes }, highlights: { cells, notes } };\n        }\n      } else if (tip.type === 'X-Group') {\n        const { domain, rows, cols, blocks, poses: cells, d } = tip;\n        const notes = new Set([d]);\n        if (domain === 'row') {\n          return { domain: { rows }, effect: { cols, blocks, notes }, highlights: { cells, notes } };\n        } else if (domain === 'col') {\n          return { domain: { cols }, effect: { rows, blocks, notes }, highlights: { cells, notes } };\n        } else if (domain === 'block') {\n          return { domain: { blocks }, effect: { rows, cols, notes }, highlights: { cells, notes } };\n        }\n      } else if (tip.type === 'chain') {\n        const { chain, effectedPoses, d, effectedDs } = tip;\n        const curChain = chain.slice(0, chainStep);\n        const allPoses = [];\n        curChain.forEach(({ pos }) => {\n          if (!pos.isAlsc) {\n            // no alsc\n            allPoses.push(...sudokus.getRealPoses(pos));\n          }\n        });\n        const poses = new Set(allPoses);\n        const withoutOutlinePoses = new Set(allPoses);\n        // remove head and tail\n        sudokus.getRealPoses(chain[0].pos).forEach(p => withoutOutlinePoses.delete(p));\n        sudokus.getRealPoses(chain[chain.length - 1].pos).forEach(p => withoutOutlinePoses.delete(p));\n\n        const effectedNotes = effectedDs ? effectedDs : new Set([d]);\n        const posNotes = {};\n        const posSubNotes = {};\n        for (const n of curChain) {\n          let _posNotes = posNotes;\n          if (n.d !== d) {\n            _posNotes = posSubNotes;\n          }\n          const { pos } = n;\n          for (const p of sudokus.getRealPoses(pos)) {\n            const subNotes = _posNotes[p] || new Set();\n            _posNotes[p] = subNotes;\n            subNotes.add(n.d);\n          }\n        }\n\n        const frames = [];\n        const domain = {};\n        let lastAls = null;\n        let lastPos = null;\n\n        // frames\n        curChain.forEach(({ pos, als }) => {\n          if (pos.isAlsc) {\n            lastAls = als;\n            lastPos = pos;\n          } else if (pos.isGroup) {\n            const { key, domain, block, row, col } = pos;\n            frames.push({ key, domain: [...domain][0], block, row, col });\n          }\n        });\n        domain.cells = lastAls && lastAls.poses;\n        lastPos && sudokus.getRealPoses(lastPos).forEach(p => poses.add(p));\n\n        // arrows\n        const arrows = [];\n        let startNode = curChain[0];\n        for (const endNode of curChain.slice(1)) {\n          const [startPos, endPos] = findClosedPosPair(\n            sudokus.getRealPoses(startNode.pos),\n            sudokus.getRealPoses(endNode.pos)\n          );\n\n          arrows.push({\n            startPos,\n            startDigit: startNode.d,\n            endPos,\n            endDigit: endNode.d,\n            type: endNode.val ? 'solid' : 'dashed',\n          });\n          startNode = endNode;\n        }\n        const effect = curChain.length === chain.length ? { cells: effectedPoses, notes: effectedNotes } : null;\n        return {\n          domain,\n          frames,\n          arrows,\n          effect,\n          highlights: { cells: poses, posNotes, posSubNotes, withoutOutlinePoses },\n        };\n      } else if (tip.type === 'trial-error') {\n        const { startIdx, pos, d, err } = tip;\n        const values = new Set([d]);\n        let marks = null;\n        if (err === true) {\n          // is complete\n          marks = { highlights: { cells: new Set([pos]), values, notes: values } };\n        } else {\n          const { domain, digits } = err;\n          if (cellsRecord.idx >= startIdx) {\n            marks = {\n              effect: { [domain + 's']: new Set([err[domain]]), notes: digits, values: digits },\n              highlights: { cells: new Set([pos]), values, notes: values },\n            };\n          }\n        }\n        if (cellsRecord.idx >= startIdx) {\n          return marks;\n        }\n      }\n    }\n  }, [cellsRecord.idx, chainStep, tip]);\n\n  const changeChainStepHandler = useCallback(\n    d => {\n      if (tip && tip.type === 'chain') {\n        const len = tip.chain.length;\n        setChainStep(s => {\n          return ((s - 1 + d + len) % len) + 1;\n        });\n      }\n    },\n    [tip]\n  );\n\n  const jumpToTrialStartHandler = useCallback(() => {\n    if (tip && tip.type === 'trial-error') {\n      sudoku.jumpTo(tip.startIdx);\n    }\n  }, [sudoku, tip]);\n\n  // event listeners\n  useEffect(() => {\n    const keydownHandler = e => {\n      console.log(e);\n      // TODO: handler other shortcut keys\n      if (e.code.startsWith('Digit')) {\n        const d = parseInt(e.key);\n        digitClickedHandler(d);\n      } else if (e.key === 'N') {\n        startNewGameHandler();\n      } else if (e.key === 'n') {\n        if (e.ctrlKey) {\n          autoNoteHandler();\n        } else {\n          toggleIsNotingHandler();\n        }\n      } else if (e.key === 'a') {\n        if (e.ctrlKey) {\n          toggleShowAvailHandler();\n        } else {\n          toggleWithALSHandler();\n        }\n      } else if (e.key === 's' && !e.isComposing && !e.metaKey) {\n        solveHandler();\n      } else if (e.key === 'r' && !e.isComposing && !e.metaKey) {\n        resetHandler();\n      } else if (e.key === 'e') {\n        eraseValueHandler();\n      } else if (e.key === 'b') {\n        if (!activeVal && !activePos) {\n          cellClickedHandler(getPosition(4, 4));\n        }\n      } else if (e.key === 'd' || e.key === 'Escape') {\n        deselectHandler();\n      } else if (e.key === 't') {\n        tipHandler();\n      } else if (e.key === 'x') {\n        cancelTipHandler();\n      } else if (e.key === 'y') {\n        changeChainStepHandler(-1);\n        jumpToTrialStartHandler();\n      } else if (e.key === 'u') {\n        changeChainStepHandler(1);\n      } else if (e.key === 'p') {\n        autoPlacePointingClaimingHandler();\n      } else if (e.key === 'h' || e.key === 'ArrowLeft') {\n        if (activePos) {\n          moveActivePos(0, -1);\n        } else if (activeVal) {\n          moveActiveVal(-1);\n        } else {\n          sudoku.jumpToFirst();\n        }\n      } else if (e.key === 'l' || e.key === 'ArrowRight') {\n        if (activePos) {\n          moveActivePos(0, 1);\n        } else if (activeVal) {\n          moveActiveVal(1);\n        } else {\n          sudoku.jumpToLast();\n        }\n      } else if (e.key === 'j' || e.key === 'ArrowDown') {\n        if (activePos) {\n          moveActivePos(1, 0);\n        } else if (activeVal) {\n          moveActiveVal(-1);\n        } else {\n          sudoku.jump(-1);\n        }\n      } else if (e.key === 'k' || e.key === 'ArrowUp') {\n        if (activePos) {\n          moveActivePos(-1, 0);\n        } else if (activeVal) {\n          moveActiveVal(1);\n        } else {\n          sudoku.jump(1);\n        }\n      } else {\n        return;\n      }\n      // e.preventDefault();\n    };\n    document.addEventListener('keydown', keydownHandler);\n\n    return () => {\n      document.removeEventListener('keydown', keydownHandler);\n    };\n  }, [\n    activePos,\n    activeVal,\n    autoNoteHandler,\n    autoPlacePointingClaimingHandler,\n    cancelTipHandler,\n    cellClickedHandler,\n    changeChainStepHandler,\n    deselectHandler,\n    digitClickedHandler,\n    eraseValueHandler,\n    jumpToTrialStartHandler,\n    moveActivePos,\n    moveActiveVal,\n    resetHandler,\n    solveHandler,\n    startNewGameHandler,\n    sudoku,\n    tip,\n    tipHandler,\n    toggleIsNotingHandler,\n    toggleShowAvailHandler,\n    toggleWithALSHandler,\n  ]);\n\n  useEffect(() => {\n    if (tip) {\n      if (tip.includedCells && tip.includedCells.has(boardCells)) {\n        return;\n      }\n      // clear tip if values changed\n      setTip(null);\n      sudoku.clearHistoryLowerBound();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [boardCells]);\n\n  let shareContent = null;\n  if (showShare) {\n    const url = new URL(window.location);\n    const initialPuzzle = sudoku.initialPuzzle;\n    const curPuzzle = sudoku.stringify();\n    url.search = '?puzzle=' + curPuzzle;\n    shareContent = (\n      <div className={styles.QRCode}>\n        <QRCode size={256} value={url.toString()} />\n        <p>{initialPuzzle}</p>\n        <p>{curPuzzle}</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {isLoading && <Loading />}\n      <Modal show={showShare} close={() => setShowShare(false)}>\n        {shareContent}\n      </Modal>\n      <div className={styles.Menu}>\n        <Button onClick={startNewGameHandler}>New</Button>\n        <Button onClick={startGameHandler}>Start</Button>\n        <Button onClick={editGameHandler}>Edit</Button>\n        <Button onClick={emptyHandler}>Empty</Button>\n        <Button onClick={() => setShowShare(true)}>Share</Button>\n      </div>\n      <div className={styles.Board}>\n        <Board\n          isComplete={isComplete}\n          cells={boardCells}\n          availablePositions={availablePositions}\n          activeVal={activeVal}\n          activePos={activePos}\n          cellClickedHandler={cellClickedHandler}\n          showAvail={showAvail}\n          isNoting={isNoting}\n          marks={marks}\n        />\n      </div>\n      <div className={styles.Controls}>\n        <Controls\n          cellsRecord={cellsRecord}\n          hasPrev={sudoku.hasPrev}\n          hasNext={sudoku.hasNext}\n          jump={sudoku.jump}\n          jumpToFirst={sudoku.jumpToFirst}\n          jumpToLast={sudoku.jumpToLast}\n          remainingDigits={remainingDigits}\n          activeVal={activeVal}\n          availableDigits={availableDigits}\n          digitClickedHandler={digitClickedHandler}\n          showAvail={showAvail}\n          isNoting={isNoting}\n          withALS={withALS}\n          solveHandler={solveHandler}\n          resetHandler={resetHandler}\n          eraseValueHandler={eraseValueHandler}\n          deselectHandler={deselectHandler}\n          toggleShowAvailHandler={toggleShowAvailHandler}\n          toggleIsNotingHandler={toggleIsNotingHandler}\n          toggleWithALSHandler={toggleWithALSHandler}\n          autoNoteHandler={autoNoteHandler}\n          autoPlacePointingClaimingHandler={autoPlacePointingClaimingHandler}\n          tip={tip}\n          tipHandler={tipHandler}\n          cancelTipHandler={cancelTipHandler}\n          changeChainStepHandler={changeChainStepHandler}\n          jumpToTrailStartHandler={jumpToTrialStartHandler}\n        />\n      </div>\n      <div className={styles.Info}></div>\n    </>\n  );\n};\n\nexport default Sudoku;\n","import React, { useState, useCallback, useRef } from 'react';\nimport Button from '../../components/UI/Button/Button';\nimport styles from './NewGame.module.scss';\nimport { useEffect } from 'react';\n\nconst samplePuzzle = `901002708\n570060000\n000000004\n000000000\n700421900\n000098030\n300506070\n009003000\n000080051`;\n\nconst NewGame = ({ cancelNewGameHandler, newGameHandler, error }) => {\n  const [puzzle, setPuzzle] = useState('');\n  const puzzleChangedHandler = useCallback(event => {\n    setPuzzle(event.target.value);\n  }, []);\n\n  const textareaRef = useRef();\n  useEffect(() => {\n    textareaRef.current.focus();\n  }, []);\n\n  // event listeners\n  useEffect(() => {\n    const keydownHandler = e => {\n      // console.log(e);\n      if (e.key === 'Escape') {\n        cancelNewGameHandler();\n      } else if (e.key === 'Enter' && e.shiftKey) {\n        newGameHandler(puzzle);\n      } else {\n        return;\n      }\n      e.preventDefault();\n    };\n    document.addEventListener('keydown', keydownHandler);\n\n    return () => {\n      document.removeEventListener('keydown', keydownHandler);\n    };\n  }, [cancelNewGameHandler, newGameHandler, puzzle]);\n\n  return (\n    <div className={styles.NewGame}>\n      <h1>input a new puzzle</h1>\n      {error && <div className={styles.Error}>{error.message}</div>}\n      <textarea\n        ref={textareaRef}\n        id=\"puzzle\"\n        name=\"puzzle\"\n        inputMode=\"numeric\"\n        onChange={puzzleChangedHandler}\n        value={puzzle}\n        placeholder={samplePuzzle}\n      />\n      <Button onClick={cancelNewGameHandler}>Cancel</Button>\n      <Button onClick={() => newGameHandler(puzzle)}>Done</Button>\n    </div>\n  );\n};\n\nexport default NewGame;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Main from './Main';\nimport NewGame from './NewGame';\nimport styles from './Sudoku.module.scss';\nimport * as sudokus from '../../libs/sudoku';\nimport * as utils from '../../libs/utils';\n\nconst Sudoku = () => {\n  const [alertInfo, setAlertInfo] = useState();\n\n  const checkSudokuResults = useCallback(results => {\n    if (results) {\n      if (results.length === 0) {\n        setAlertInfo('this sudoku has no solution');\n      } else if (results.length > 1) {\n        setAlertInfo('this sudoku has multi solutions');\n      }\n    }\n  }, []);\n\n  const [sudoku, setSudoku] = useState(() => {\n    // get puzzle from url search parameter: puzzle\n    const puzzle = new URLSearchParams(window.location.search).get('puzzle');\n    try {\n      const instance = new sudokus.Sudoku(puzzle);\n      checkSudokuResults(instance.results);\n      return instance;\n    } catch (error) {\n      console.error(error);\n      return new sudokus.Sudoku();\n    }\n  });\n  const [isNewGame, setIsNewGame] = useState(false);\n  const [puzzleError, setPuzzleError] = useState(null);\n\n  // handlers\n  const startNewGameHandler = useCallback(() => {\n    setIsNewGame(true);\n  }, []);\n  const cancelNewGameHandler = useCallback(() => {\n    setIsNewGame(false);\n  }, []);\n\n  const newGameHandler = useCallback(\n    (puzzle, checkResults = true) => {\n      try {\n        const instance = new sudokus.Sudoku(puzzle);\n        if (checkSudokuResults) {\n          checkSudokuResults(instance.results);\n        }\n        setSudoku(instance);\n        setIsNewGame(false);\n        setPuzzleError(null);\n      } catch (error) {\n        console.error(error);\n        setPuzzleError(error);\n      }\n    },\n    [checkSudokuResults]\n  );\n\n  const emptyHandler = useCallback(() => {\n    newGameHandler();\n  }, [newGameHandler]);\n\n  // effects\n  useEffect(() => {\n    if (alertInfo) {\n      alert(alertInfo);\n      setAlertInfo(null);\n    }\n  }, [alertInfo]);\n\n  useEffect(() => {\n    // set debug\n    const isDebug = new URLSearchParams(window.location.search).get('debug');\n    utils.setDebug(isDebug !== null);\n  }, []);\n\n  let content = null;\n  if (isNewGame) {\n    content = (\n      <NewGame cancelNewGameHandler={cancelNewGameHandler} newGameHandler={newGameHandler} error={puzzleError} />\n    );\n  } else {\n    content = (\n      <Main\n        sudoku={sudoku}\n        startNewGameHandler={startNewGameHandler}\n        newGameHandler={newGameHandler}\n        emptyHandler={emptyHandler}\n      />\n    );\n  }\n\n  return <div className={styles.Sudoku}>{content}</div>;\n};\n\nexport default Sudoku;\n","import React from 'react';\nimport Sudoku from './containers/Sudodu/Sudoku';\n\nexport default function App() {\n  return <Sudoku />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}